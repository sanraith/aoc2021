{"version":3,"file":"static/js/240.10857eec.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/rxjs/src/internal/NotificationFactories.ts","../node_modules/rxjs/src/internal/Observable.ts","../node_modules/rxjs/src/internal/Subscriber.ts","../node_modules/rxjs/src/internal/Subscription.ts","../node_modules/rxjs/src/internal/config.ts","../node_modules/rxjs/src/internal/lastValueFrom.ts","../node_modules/rxjs/src/internal/util/lift.ts","../node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts","../node_modules/rxjs/src/internal/operators/tap.ts","../node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts","../node_modules/rxjs/src/internal/symbol/observable.ts","../node_modules/rxjs/src/internal/util/EmptyError.ts","../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../node_modules/rxjs/src/internal/util/arrRemove.ts","../node_modules/rxjs/src/internal/util/createErrorClass.ts","../node_modules/rxjs/src/internal/util/errorContext.ts","../node_modules/rxjs/src/internal/util/identity.ts","../node_modules/rxjs/src/internal/util/isFunction.ts","../node_modules/rxjs/src/internal/util/noop.ts","../node_modules/rxjs/src/internal/util/pipe.ts","../node_modules/rxjs/src/internal/util/reportUnhandledError.ts","../node_modules/rxjs/node_modules/tslib/tslib.es6.js","../node_modules/ts-stopwatch/src/index.ts","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/createClass.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/createSuper.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/inherits.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/toArray.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/typeof.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../javascript/esm|E:/Home/Code/aoc2021/node_modules/@babel/runtime/helpers/esm/wrapRegExp.js"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n","/**\n * @prettier\n */\nimport { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: Partial<Observer<T>>): Subscription;\n  subscribe(next: (value: T) => void): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    errorContext(() => {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    });\n\n    return subscriber;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * ### Example:\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { take } from 'rxjs/operators';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *    let total = 0;\n   *\n   *    await source$.forEach(value => {\n   *      total += value;\n   *      console.log('observable -> ', value);\n   *    });\n   *\n   *    return total;\n   * }\n   *\n   * getTotal().then(\n   *    total => console.log('Total:', total)\n   * )\n   *\n   * // Expected:\n   * // \"observable -> 0\"\n   * // \"observable -> 1\"\n   * // \"observable -> 2\"\n   * // \"observable -> 3\"\n   * // \"Total: 6\"\n   * ```\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe(\n        (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription?.unsubscribe();\n          }\n        },\n        reject,\n        resolve\n      );\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n","import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let next: ((value: T) => void) | undefined;\n    if (isFunction(observerOrNext)) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      // The first argument is an observer object, we have to pull the handlers\n      // off and capture the owner object as the context. That is because we're\n      // going to put them all in a new destination with ensured methods\n      // for `next`, `error`, and `complete`. That's part of what makes this\n      // the \"Safe\" Subscriber.\n      ({ next, error, complete } = observerOrNext);\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n      } else {\n        context = observerOrNext;\n      }\n      next = next?.bind(context);\n      error = error?.bind(context);\n      complete = complete?.bind(context);\n    }\n\n    // Once we set the destination, the superclass `Subscriber` will\n    // do it's magic in the `_next`, `_error`, and `_complete` methods.\n    this.destination = {\n      next: next ? wrapForErrorHandling(next, this) : noop,\n      error: wrapForErrorHandling(error ?? defaultErrorHandler, this),\n      complete: complete ? wrapForErrorHandling(complete, this) : noop,\n    };\n  }\n}\n\n/**\n * Wraps a user-provided handler (or our {@link defaultErrorHandler} in one case) to\n * ensure that any thrown errors are caught and handled appropriately.\n *\n * @param handler The handler to wrap\n * @param instance The SafeSubscriber instance we're going to mark if there's an error.\n */\nfunction wrapForErrorHandling(handler: (arg?: any) => void, instance: SafeSubscriber<any>) {\n  return (...args: any[]) => {\n    try {\n      handler(...args);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(err);\n      } else {\n        // Ideal path, we report this as an unhandled error,\n        // which is thrown on a new call stack.\n        reportUnhandledError(err);\n      }\n    }\n  };\n}\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n","import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered teardowns to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _teardowns: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the teardown\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown } = this;\n      if (isFunction(initialTeardown)) {\n        try {\n          initialTeardown();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _teardowns } = this;\n      if (_teardowns) {\n        this._teardowns = null;\n        for (const teardown of _teardowns) {\n          try {\n            execTeardown(teardown);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a teardown to this subscription, so that teardown will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever teardown is passed to it\n   * will automatically be executed (unless the teardown itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as teardowns to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The teardown logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the teardown if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever teardown is handed to it automatically.\n        execTeardown(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._teardowns = this._teardowns ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a teardown from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same teardown instance of a function or an unsubscribable object to a `Subcription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All teardown instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The teardown to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _teardowns } = this;\n    _teardowns && arrRemove(_teardowns, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execTeardown(teardown: Unsubscribable | (() => void)) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n","import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\n\nexport interface LastValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function lastValueFrom<T, D>(source: Observable<T>, config: LastValueFromConfig<D>): Promise<T | D>;\nexport function lastValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * waiting for it to complete, and resolving the returned promise with the\n * last value from the observed stream.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will complete. If the source\n * observable does not complete, you will end up with a promise that is hung up, and\n * potentially all of the state of an async function hanging out in memory. To avoid\n * this situation, look into adding something like {@link timeout}, {@link take},\n * {@link takeWhile}, or {@link takeUntil} amongst others.\n *\n * ### Example\n *\n * Wait for the last value from a stream and emit it from a promise in\n * an async function.\n *\n * ```ts\n * import { interval, lastValueFrom } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * async function execute() {\n *   const source$ = interval(2000).pipe(take(10));\n *   const finalNumber = await lastValueFrom(source$);\n *   console.log(`The final number is ${finalNumber}`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // \"The final number is 9\"\n * ```\n *\n * @see {@link firstValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function lastValueFrom<T, D>(source: Observable<T>, config?: LastValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    let _hasValue = false;\n    let _value: T;\n    source.subscribe({\n      next: (value) => {\n        _value = value;\n        _hasValue = true;\n      },\n      error: reject,\n      complete: () => {\n        if (_hasValue) {\n          resolve(_value);\n        } else if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n   * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure teardown.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure teardown.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    const { closed } = this;\n    super.unsubscribe();\n    // Execute additional teardown if we have any and we didn't already do so.\n    !closed && this.onFinalize?.();\n  }\n}\n","import { MonoTypeOperatorFunction, Observer } from '../types';\nimport { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\n\nexport interface TapObserver<T> extends Observer<T> {\n  subscribe: () => void;\n  unsubscribe: () => void;\n  finalize: () => void;\n}\n\nexport function tap<T>(observer?: Partial<TapObserver<T>>): MonoTypeOperatorFunction<T>;\nexport function tap<T>(next: (value: T) => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\nexport function tap<T>(\n  next?: ((value: T) => void) | null,\n  error?: ((error: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T>;\n\n/**\n * Used to perform side-effects for notifications from the source observable\n *\n * <span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span>\n *\n * ![](tap.png)\n *\n * Tap is designed to allow the developer a designated place to perform side effects. While you _could_ perform side-effects\n * inside of a `map` or a `mergeMap`, that would make their mapping functions impure, which isn't always a big deal, but will\n * make it so you can't do things like memoize those functions. The `tap` operator is designed solely for such side-effects to\n * help you remove side-effects from other operations.\n *\n * For any notification, next, error, or complete, `tap` will call the appropriate callback you have provided to it, via a function\n * reference, or a partial observer, then pass that notification down the stream.\n *\n * The observable returned by `tap` is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\n * provided to `tap` will be emitted as an error from the returned observable.\n *\n * > Be careful! You can mutate objects as they pass through the `tap` operator's handlers.\n *\n * The most common use of `tap` is actually for debugging. You can place a `tap(console.log)` anywhere\n * in your observable `pipe`, log out the notifications as they are emitted by the source returned by the previous\n * operation.\n *\n * ## Example\n * Check a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\n * and emit \"big\" or \"small\" depending on the size of that number. But we wanted to log what the original number\n * was, so we have added a `tap(console.log)`.\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { tap, map } from 'rxjs/operators';\n *\n * of(Math.random()).pipe(\n *   tap(console.log),\n *   map(n => n > 0.5 ? 'big' : 'small')\n * ).subscribe(console.log);\n * ```\n *\n * ## Example\n * Using `tap` to analyze a value and force an error. Below is an observable where in our system we only\n * want to emit numbers 3 or less we get from another source. We can force our observable to error\n * using `tap`.\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { tap } from 'rxjs/operators';\n *\n * const source = of(1, 2, 3, 4, 5)\n *\n * source.pipe(\n *  tap(n => {\n *    if (n > 3) {\n *      throw new TypeError(`Value ${n} is greater than 3`)\n *    }\n *  })\n * )\n * .subscribe(console.log);\n * ```\n *\n * ## Example\n * We want to know when an observable completes before moving on to the next observable. The system\n * below will emit a random series of `\"X\"` characters from 3 different observables in sequence. The\n * only way we know when one observable completes and moves to the next one, in this case, is because\n * we have added a `tap` with the side-effect of logging to console.\n *\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { tap, map, concatMap, take } from 'rxjs/operators';\n *\n *\n * of(1, 2, 3).pipe(\n *  concatMap(n => interval(1000).pipe(\n *    take(Math.round(Math.random() * 10)),\n *    map(() => 'X'),\n *    tap({\n *      complete: () => console.log(`Done with ${n}`)\n *    })\n *  ))\n * )\n * .subscribe(console.log);\n * ```\n *\n * @see {@link finalize}\n * @see {@link Observable#subscribe}\n *\n * @param observerOrNext A next handler or partial observer\n * @param error An error handler\n * @param complete A completion handler\n * @return A function that returns an Observable identical to the source, but\n * runs the specified Observer or callback(s) for each item.\n */\nexport function tap<T>(\n  observerOrNext?: Partial<TapObserver<T>> | ((value: T) => void) | null,\n  error?: ((e: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T> {\n  // We have to check to see not only if next is a function,\n  // but if error or complete were passed. This is because someone\n  // could technically call tap like `tap(null, fn)` or `tap(null, null, fn)`.\n  const tapObserver =\n    isFunction(observerOrNext) || error || complete\n      ? // tslint:disable-next-line: no-object-literal-type-assertion\n        ({ next: observerOrNext as Exclude<typeof observerOrNext, Partial<TapObserver<T>>>, error, complete } as Partial<TapObserver<T>>)\n      : observerOrNext;\n\n  return tapObserver\n    ? operate((source, subscriber) => {\n        tapObserver.subscribe?.();\n        let isUnsub = true;\n        source.subscribe(\n          new OperatorSubscriber(\n            subscriber,\n            (value) => {\n              tapObserver.next?.(value);\n              subscriber.next(value);\n            },\n            () => {\n              isUnsub = false;\n              tapObserver.complete?.();\n              subscriber.complete();\n            },\n            (err) => {\n              isUnsub = false;\n              tapObserver.error?.(err);\n              subscriber.error(err);\n            },\n            () => {\n              if (isUnsub) {\n                tapObserver.unsubscribe?.();\n              }\n              tapObserver.finalize?.();\n            }\n          )\n        );\n      })\n    : // Tap was called with no valid tap observer or handler\n      // (e.g. `tap(null, null, null)` or `tap(null)` or `tap()`)\n      // so we're going to just mirror the source.\n      identity;\n}\n","type SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => number;\ntype ClearTimeoutFunction = (handle: number) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(...args) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.setTimeout || setTimeout)(...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle);\n  },\n  delegate: undefined,\n};\n","/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable: string | symbol = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n","import { createErrorClass } from './createErrorClass';\n\nexport interface EmptyError extends Error {}\n\nexport interface EmptyErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): EmptyError;\n}\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n * @see {@link firstValueFrom}\n * @see {@link lastValueFrom}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = createErrorClass((_super) => function EmptyErrorImpl(this: any) {\n  _super(this);\n  this.name = 'EmptyError';\n  this.message = 'no elements in sequence';\n});\n","import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n","/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n","/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n","import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\r\n * Records durations of time, with some design inspiration from a physical stopwatch.\r\n *\r\n * To begin recording time, create a new instance of Stopwatch and call its\r\n * {@link Stopwatch#start} method.\r\n *\r\n * Pause the stopwatch via {@link Stopwatch#stop}, then resume by calling\r\n * {@link Stopwatch#start} again.\r\n *\r\n * Use {@link Stopwatch#getTime} to get the amount of time that the stopwatch has\r\n * recorded so far (ignoring durations of time that the Stopwatch was stopped).\r\n * There's no need to stop the stopwatch before doing this.\r\n *\r\n * Similar to advanced physical stopwatches' abilities to record multiple lap times\r\n * Stopwatch supports recording multiple \"slices\" of time. See {@link Stopwatch.Slice},\r\n * {@link Stopwatch#slice}, {@link Stopwatch#getPendingSlice},\r\n * {@link Stopwatch#getCompletedSlices}, and {@link Stopwatch#getCompletedAndPendingSlices}.\r\n * NOTE: {@link Stopwatch#stop} supports an optional parameter to simultaneously\r\n *       record the current pending \"slice\".\r\n *\r\n * Use {@link Stopwatch#reset} to reset the stopwatch to its initial state.\r\n * NOTE: {@link Stopwatch#start} also supports an optional parameter to force\r\n *       a reset before (re)starting.\r\n *\r\n * See {@link Stopwatch#getState}, {@link Stopwatch#isIdle}, {@link Stopwatch#isRunning},\r\n * and {@link Stopwatch#isStopped} for testing the current state of the Stopwatch.\r\n *\r\n * By default, Stopwatch internally uses {@link Date.now} for tracking the amount of\r\n * time that has passed. This is the most compatible implementation, but has some limitations:\r\n * - Maximum precision of 1ms.\r\n * - Results can be thrown off if the computer's time is adjusted (manually or automatically)\r\n *   during execution of the code.\r\n *\r\n * If your runtime environment supports a more reliable or higher precision method for\r\n * obtaining system time or program execution time, then you can override this default\r\n * implementation by either:\r\n * - Providing a custom \"system time getter\" function to the Stopwatch constructor.\r\n * - Or using {@link Stopwatch.setDefaultSystemTimeGetter} to ensure that ALL future instances\r\n *   of Stopwatch use your custom \"system time getter\" by default.\r\n * NOTE: The unit of time/duration reported by Stopwatch is determined by the unit time\r\n *       returned by the \"system time getter\" function.\r\n *\r\n * Stopwatch is not limited to recording durations of system time. It can record the \"duration\"\r\n * (change) of any numeric value that may change over time, but is guaranteed to never decrease\r\n * over time.\r\n */\r\nexport class Stopwatch {\r\n    /**\r\n     * The system time at which the stopwatch was started.\r\n     * Undefined if the stopwatch is not yet started, or has been reset.\r\n     */\r\n    private startSystemTime: number | undefined;\r\n\r\n    /**\r\n     * The system time at which the stopwatch was stopped.\r\n     * Undefined if the stopwatch is not currently stopped,\r\n     * is not yet started, or has been reset.\r\n     */\r\n    private stopSystemTime: number | undefined;\r\n\r\n    /**\r\n     * The total amount of system time the stopwatch has been stopped since\r\n     * the last reset.\r\n     */\r\n    private stopDuration: number = 0;\r\n\r\n    /**\r\n     * The stopwatch time at which the current pending slice was started.\r\n     * Undefined if the stopwatch is not yet started, or has been reset.\r\n     */\r\n    private pendingSliceStartStopwatchTime: number | undefined;\r\n\r\n    /**\r\n     * Recorded results of all completed slices since the the last reset.\r\n     */\r\n    private completedSlices: Stopwatch.Slice[] = [];\r\n\r\n    /**\r\n     * Creates a new Stopwatch instance.\r\n     * The unit of all durations reported by this instance will match the\r\n     * unit of time returned by the provided `getSystemTime` param.\r\n     *\r\n     * @param getSystemTime - A callback that returns the current system time.\r\n     *        Defaults to the current default system time getter as specified by the most\r\n     *        recent call to {@link Stopwatch.setDefaultSystemTimeGetter}, which in turn\r\n     *        defaults to {@link Date.now}.\r\n     */\r\n    public constructor(\r\n        private readonly getSystemTime: Stopwatch.GetTimeFunc = defaultSystemTimeGetter\r\n    ) {}\r\n\r\n    /**\r\n     * Get the current state of this stopwatch.\r\n     *\r\n     * @return the current state of this stopwatch.\r\n     */\r\n    public getState(): Stopwatch.State {\r\n        if (this.startSystemTime === undefined) {\r\n            return Stopwatch.State.IDLE;\r\n        } else if (this.stopSystemTime === undefined) {\r\n            return Stopwatch.State.RUNNING;\r\n        } else {\r\n            return Stopwatch.State.STOPPED;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if this stopwatch is currently {@link Stopwatch.State#IDLE}.\r\n     *\r\n     * @return true if this stopwatch is currently {@link Stopwatch.State#IDLE}.\r\n     */\r\n    public isIdle(): boolean {\r\n        return this.getState() === Stopwatch.State.IDLE;\r\n    }\r\n\r\n    /**\r\n     * Test if this stopwatch is currently {@link Stopwatch.State#RUNNING}.\r\n     *\r\n     * @return true if this stopwatch is currently {@link Stopwatch.State#RUNNING}.\r\n     */\r\n    public isRunning(): boolean {\r\n        return this.getState() === Stopwatch.State.RUNNING;\r\n    }\r\n\r\n    /**\r\n     * Test if this stopwatch is currently {@link Stopwatch.State#STOPPED}.\r\n     *\r\n     * @return true if this stopwatch is currently {@link Stopwatch.State#STOPPED}.\r\n     */\r\n    public isStopped(): boolean {\r\n        return this.getState() === Stopwatch.State.STOPPED;\r\n    }\r\n\r\n    /**\r\n     * Get the current stopwatch time.\r\n     * This is the total amount of system time that this stopwatch has been running since\r\n     * the last reset.\r\n     *\r\n     * Returns zero if the state is currently {@link Stopwatch.State#IDLE}.\r\n     *\r\n     * @return the current stopwatch time.\r\n     */\r\n    public getTime(): number {\r\n        return this.calculateStopwatchTime();\r\n    }\r\n\r\n    /**\r\n     * Get details about the current pending slice for this stopwatch, as of now.\r\n     *\r\n     * Returns a zero-length slice if the state is currently {@link Stopwatch.State#IDLE}.\r\n     *\r\n     * @return details about the current pending slice for this stopwatch, as of now.\r\n     */\r\n    public getPendingSlice(): Stopwatch.Slice {\r\n        return this.calculatePendingSlice();\r\n    }\r\n\r\n    /**\r\n     * Get a list of all completed/recorded slices for this stopwatch since the last reset.\r\n     * @return a list of all completed/recorded slices for this stopwatch since the last reset.\r\n     */\r\n    public getCompletedSlices(): Stopwatch.Slice[] {\r\n        return Array.from(this.completedSlices);\r\n    }\r\n\r\n    /**\r\n     * Get a list of all completed/recorded slices for this stopwatch since the last reset,\r\n     * plus the current pending slice.\r\n     * @return a list of all completed/recorded slices for this stopwatch since the last reset,\r\n     * plus the current pending slice.\r\n     */\r\n    public getCompletedAndPendingSlices(): Stopwatch.Slice[] {\r\n        return [...this.completedSlices, this.getPendingSlice()];\r\n    }\r\n\r\n    /**\r\n     * Starts (or resumes) running this stopwatch.\r\n     *\r\n     * Does nothing if the state is already {@link Stopwatch.State#RUNNING} and `forceReset`\r\n     * is false.\r\n     *\r\n     * The state is guaranteed to be {@link Stopwatch.State#RUNNING} after\r\n     * calling this method.\r\n     *\r\n     * @param forceReset - If true, then the stopwatch is {@link #reset} before starting.\r\n     */\r\n    public start(forceReset: boolean = false): void {\r\n        if (forceReset) {\r\n            this.reset();\r\n        }\r\n\r\n        if (this.stopSystemTime !== undefined) {\r\n            const systemNow = this.getSystemTime();\r\n            const stopDuration = systemNow - this.stopSystemTime;\r\n\r\n            // Accumulate duration ot stop\r\n            this.stopDuration += stopDuration;\r\n            // Resume running\r\n            this.stopSystemTime = undefined;\r\n        } else if (this.startSystemTime === undefined) {\r\n            const systemNow = this.getSystemTime();\r\n            // Record initial start time\r\n            this.startSystemTime = systemNow;\r\n            this.pendingSliceStartStopwatchTime = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ends the currently pending slice {@link Stopwatch.Slice}, records it, and\r\n     * starts the next pending slice.\r\n     *\r\n     * Does nothing and returns a zero-length slice if the state is\r\n     * currently {@link Stopwatch.State#IDLE}.\r\n     *\r\n     * If the state is currently {@link Stopwatch.State#STOPPED}, then the slice\r\n     * technically ends (and the next pending slice starts) at the same time\r\n     * the stopwatch was stopped.\r\n     *\r\n     * This method does not change the state of the stopwatch.\r\n     *\r\n     * @returns the recorded slice.\r\n     */\r\n    public slice(): Stopwatch.Slice {\r\n        return this.recordPendingSlice();\r\n    }\r\n\r\n    /**\r\n     * Stops (pauses) this stopwatch and returns the current {@link #getTime}\r\n     * result. Time will not be accumulated to this stopwatch's total running duration\r\n     * or the current pending slice while it is stopped. Call {@link #start} to resume\r\n     * accumulating time.\r\n     *\r\n     * Does nothing and returns zero if the state is currently {@link Stopwatch.State#IDLE}.\r\n     *\r\n     * Stopping a stopwatch that is already {@link Stopwatch.State#STOPPED} will still\r\n     * record another slice if `recordPendingSlice` is true.\r\n     *\r\n     * The state will be {@link Stopwatch.State#STOPPED} after calling this method if\r\n     * the state is not currently {@link Stopwatch.State#IDLE}. otherwise, it will remain\r\n     * {@link Stopwatch.State#IDLE}.\r\n     *\r\n     * @param recordPendingSlice - If true, then also end/record the current pending slice.\r\n     *        This ensures that slice is ended exactly at the same time that the stopwatch\r\n     *        is stopped.\r\n     * @return the current {@link #getTime} result.\r\n     */\r\n    public stop(recordPendingSlice: boolean = false): number {\r\n        if (this.startSystemTime === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        const systemTimeOfStopwatchTime = this.getSystemTimeOfCurrentStopwatchTime();\r\n\r\n        if (recordPendingSlice) {\r\n            this.recordPendingSlice(\r\n                this.calculateStopwatchTime(systemTimeOfStopwatchTime)\r\n            );\r\n        }\r\n\r\n        this.stopSystemTime = systemTimeOfStopwatchTime;\r\n\r\n        return this.getTime();\r\n    }\r\n\r\n    /**\r\n     * Completely resets this stopwatch to its initial state.\r\n     * Clears out all recorded running duration, slices, etc.\r\n     * The state is guaranteed to be {@link Stopwatch.State#IDLE} after\r\n     * calling this method.\r\n     */\r\n    public reset(): void {\r\n        this.startSystemTime = this.pendingSliceStartStopwatchTime = this.stopSystemTime = undefined;\r\n        this.stopDuration = 0;\r\n        this.completedSlices = [];\r\n    }\r\n\r\n    /**\r\n     * Gets the system time equivalent of the current stopwatch time.\r\n     * If this stopwatch is currently stopped, then the system time at which it was\r\n     * stopped is returned.\r\n     * Otherwise, the current system time according to {@link Stopwatch#getSystemTime} is\r\n     * returned.\r\n     * @return the system time equivalent of the current stopwatch time.\r\n     */\r\n    private getSystemTimeOfCurrentStopwatchTime(): number {\r\n        return this.stopSystemTime === undefined\r\n            ? this.getSystemTime()\r\n            : this.stopSystemTime;\r\n    }\r\n\r\n    /**\r\n     * Calculates the current stopwatch time as of a specified system time.\r\n     * @param endSystemTime - The end system time for the calculation.\r\n     * @return the current stopwatch time as of the specified system time.\r\n     */\r\n    private calculateStopwatchTime(endSystemTime?: number): number {\r\n        if (this.startSystemTime === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        if (endSystemTime === undefined) {\r\n            endSystemTime = this.getSystemTimeOfCurrentStopwatchTime();\r\n        }\r\n\r\n        return endSystemTime - this.startSystemTime - this.stopDuration;\r\n    }\r\n\r\n    /**\r\n     * Calculates the current pending slice as of a specified stopwatch time.\r\n     * @param endStopwatchTime - The end stopwatch time for the calculation.\r\n     * @return the current pending slice as of the specified stopwatch time.\r\n     */\r\n    private calculatePendingSlice(endStopwatchTime?: number): Stopwatch.Slice {\r\n        if (this.pendingSliceStartStopwatchTime === undefined) {\r\n            return Object.freeze({\r\n                startTime: 0,\r\n                endTime: 0,\r\n                duration: 0\r\n            });\r\n        }\r\n\r\n        if (endStopwatchTime === undefined) {\r\n            endStopwatchTime = this.getTime();\r\n        }\r\n\r\n        return Object.freeze({\r\n            startTime: this.pendingSliceStartStopwatchTime,\r\n            endTime: endStopwatchTime,\r\n            duration: endStopwatchTime - this.pendingSliceStartStopwatchTime\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Private implementation of ending/recording the currently pending slice.\r\n     * See {@link #slice} for more explanation.\r\n     * @param endStopwatchTime - The end stopwatch time of the slice.\r\n     * @return the recorded slice.\r\n     */\r\n    private recordPendingSlice(endStopwatchTime?: number): Stopwatch.Slice {\r\n        if (this.pendingSliceStartStopwatchTime !== undefined) {\r\n            if (endStopwatchTime === undefined) {\r\n                endStopwatchTime = this.getTime();\r\n            }\r\n\r\n            const slice = this.calculatePendingSlice(endStopwatchTime);\r\n\r\n            // Start the next pending slice\r\n            this.pendingSliceStartStopwatchTime = slice.endTime;\r\n\r\n            // Record the slice\r\n            this.completedSlices.push(slice);\r\n\r\n            return slice;\r\n        } else {\r\n            return this.calculatePendingSlice();\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace Stopwatch {\r\n    /**\r\n     * A function that returns \"the current time\" of some system.\r\n     * The only requirement is that each call to this function must return a number\r\n     * that is greater than or equal to the previous call to the function.\r\n     */\r\n    export type GetTimeFunc = () => number;\r\n\r\n    /**\r\n     * Measurements of a single \"slice\" recorded by a {@link Stopwatch}.\r\n     */\r\n    export interface Slice {\r\n        /**\r\n         * The stopwatch time at the start of this slice.\r\n         */\r\n        readonly startTime: number;\r\n        /**\r\n         * The stopwatch time at the end of this slice.\r\n         */\r\n        readonly endTime: number;\r\n        /**\r\n         * The running duration of this slice (a.k.a., \"split time\").\r\n         */\r\n        readonly duration: number;\r\n    }\r\n\r\n    /**\r\n     * Possible states of a {@link Stopwatch}.\r\n     */\r\n    export enum State {\r\n        /**\r\n         * The stopwatch has not yet been started, or has been reset.\r\n         */\r\n        IDLE = \"IDLE\",\r\n        /**\r\n         * The stopwatch is currently running.\r\n         */\r\n        RUNNING = \"RUNNING\",\r\n        /**\r\n         * The stopwatch was previously running, but has been stopped.\r\n         */\r\n        STOPPED = \"STOPPED\"\r\n    }\r\n\r\n    /**\r\n     * Sets the default implementation of \"getSystemTime\" to be used by all future\r\n     * instances of {@link Stopwatch}.\r\n     * @param systemTimeGetter - A default \"getSystemTime\" implementation for\r\n     *        all future instances of {@link Stopwatch}.\r\n     *        Defaults to {@link Date.now}.\r\n     */\r\n    export function setDefaultSystemTimeGetter(\r\n        systemTimeGetter: GetTimeFunc = Date.now\r\n    ): void {\r\n        defaultSystemTimeGetter = systemTimeGetter;\r\n    }\r\n}\r\n\r\n/**\r\n * The default \"getSystemTime\" implementation for all new instances of\r\n * {@link Stopwatch}.\r\n * Defaults to {@link Date.now}.\r\n * Updated via {@link Stopwatch.setDefaultSystemTimeGetter}.\r\n */\r\nlet defaultSystemTimeGetter: Stopwatch.GetTimeFunc = Date.now;\r\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport inherits from \"./inherits.js\";\nexport default function _wrapRegExp() {\n  _wrapRegExp = function _wrapRegExp(re, groups) {\n    return new BabelRegExp(re, undefined, groups);\n  };\n\n  var _super = RegExp.prototype;\n\n  var _groups = new WeakMap();\n\n  function BabelRegExp(re, flags, groups) {\n    var _this = new RegExp(re, flags);\n\n    _groups.set(_this, groups || _groups.get(re));\n\n    return setPrototypeOf(_this, BabelRegExp.prototype);\n  }\n\n  inherits(BabelRegExp, RegExp);\n\n  BabelRegExp.prototype.exec = function (str) {\n    var result = _super.exec.call(this, str);\n\n    if (result) result.groups = buildGroups(result, this);\n    return result;\n  };\n\n  BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {\n    if (typeof substitution === \"string\") {\n      var groups = _groups.get(this);\n\n      return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) {\n        return \"$\" + groups[name];\n      }));\n    } else if (typeof substitution === \"function\") {\n      var _this = this;\n\n      return _super[Symbol.replace].call(this, str, function () {\n        var args = arguments;\n\n        if (_typeof(args[args.length - 1]) !== \"object\") {\n          args = [].slice.call(args);\n          args.push(buildGroups(args, _this));\n        }\n\n        return substitution.apply(this, args);\n      });\n    } else {\n      return _super[Symbol.replace].call(this, str, substitution);\n    }\n  };\n\n  function buildGroups(result, re) {\n    var g = _groups.get(re);\n\n    return Object.keys(g).reduce(function (groups, name) {\n      groups[name] = result[g[name]];\n      return groups;\n    }, Object.create(null));\n  }\n\n  return _wrapRegExp.apply(this, arguments);\n}"],"names":["module","exports","runtime","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Function","COMPLETE_NOTIFICATION","createNotification","errorNotification","nextNotification","kind","subscribe","_subscribe","lift","operator","observable","Observable","source","observerOrNext","subscriber","isObserver","add","_trySubscribe","sink","promiseCtor","getPromiseCtor","subscription","unsubscribe","pipe","operations","toPromise","x","destination","isStopped","EMPTY_OBSERVER","SafeSubscriber","handleStoppedNotification","_next","_error","_complete","closed","bind","wrapForErrorHandling","defaultErrorHandler","Subscriber","handler","instance","args","notification","onStoppedNotification","initialTeardown","_parentage","_teardowns","errors","Array","isArray","remove","e","execTeardown","teardown","Subscription","_hasParent","_addParent","parent","includes","_removeParent","EMPTY","empty","isSubscription","config","onUnhandledError","useDeprecatedSynchronousErrorHandling","useDeprecatedNextContext","lastValueFrom","hasConfig","_value","_hasValue","defaultValue","operate","init","isFunction","hasLift","liftedSource","onNext","onComplete","onError","onFinalize","tap","tapObserver","isUnsub","OperatorSubscriber","finalize","identity","timeoutProvider","setTimeout","clearTimeout","EmptyError","_super","message","UnsubscriptionError","map","join","arrRemove","arr","item","index","indexOf","splice","createErrorClass","createImpl","ctorFunc","stack","errorContext","cb","isRoot","errorThrown","captureError","noop","pipeFromArray","fns","input","reduce","reportUnhandledError","extendStatics","d","b","p","__extends","String","__","__values","o","s","m","__read","n","r","ar","__spreadArray","to","from","il","j","getSystemTime","stopDuration","completedSlices","getState","startSystemTime","Stopwatch","State","IDLE","stopSystemTime","RUNNING","STOPPED","isIdle","isRunning","getTime","calculateStopwatchTime","getPendingSlice","calculatePendingSlice","getCompletedSlices","getCompletedAndPendingSlices","start","forceReset","systemNow","pendingSliceStartStopwatchTime","recordPendingSlice","systemTimeOfStopwatchTime","getSystemTimeOfCurrentStopwatchTime","endSystemTime","endStopwatchTime","freeze","startTime","endTime","duration","setDefaultSystemTimeGetter","systemTimeGetter","Date","now","defaultSystemTimeGetter","_arrayLikeToArray","len","arr2","_arrayWithHoles","_arrayWithoutHoles","_assertThisInitialized","ReferenceError","asyncGeneratorStep","gen","_throw","_asyncToGenerator","arguments","apply","_classCallCheck","Constructor","_defineProperties","target","props","descriptor","_createClass","protoProps","staticProps","_createForOfIteratorHelper","allowArrayLike","it","F","_e","f","normalCompletion","didErr","step","_e2","_createSuper","Derived","hasNativeReflectConstruct","Super","NewTarget","Reflect","construct","_defineProperty","_getPrototypeOf","_inherits","subClass","superClass","_isNativeReflectConstruct","sham","Proxy","Boolean","valueOf","_iterableToArray","_iterableToArrayLimit","_i","_s","_arr","_n","_d","_nonIterableRest","_nonIterableSpread","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_objectSpread2","getOwnPropertyDescriptors","defineProperties","_possibleConstructorReturn","_setPrototypeOf","_slicedToArray","_toArray","_toConsumableArray","_typeof","_unsupportedIterableToArray","minLen","toString","test","_wrapRegExp","re","groups","BabelRegExp","RegExp","_groups","WeakMap","flags","_this","set","get","buildGroups","g","exec","str","replace","substitution","_"],"sourceRoot":""}