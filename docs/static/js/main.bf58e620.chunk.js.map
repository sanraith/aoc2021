{"version":3,"sources":["calendar/helpers.ts","calendar/CalendarCell.tsx","calendar/CalendarPopup.tsx","calendar/Calendar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["calendarCellId","dayNumber","CalendarCell","day","isCopy","onCellClick","cellId","isActiveDay","id","undefined","className","onClick","getPopupStyle","prevDay","state","visibility","cellRect","document","getElementById","getBoundingClientRect","left","x","top","y","width","height","maxHeight","maxWidth","CalendarPopup","onClosed","prevDayRef","useRef","popupRef","style","current","useEffect","classList","remove","add","Object","assign","ref","Calendar","rows","Array","fill","map","_","i","j","useState","openedDay","setOpenedCell","history","useHistory","push","toString","padStart","Fragment","row","rowIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RouteParser","params","useParams","console","log","page","ReactDOM","render","StrictMode","basename","process","path"],"mappings":"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","file":"static/js/main.bf58e620.chunk.js","sourcesContent":["export function calendarCellId(dayNumber: number): string {\r\n    return `cd${dayNumber}`;\r\n}\r\n","import { calendarCellId } from './helpers';\r\n\r\nexport interface CalendarCellProps {\r\n    day?: number | null;\r\n    isCopy?: boolean;\r\n    onCellClick?: (day: number) => void;\r\n}\r\n\r\nexport default function CalendarCell({ day, isCopy, onCellClick }: CalendarCellProps): JSX.Element {\r\n    const isDecemberDay = day && day >= 1 && day <= 31;\r\n    if (isDecemberDay) {\r\n        const cellId = calendarCellId(day);\r\n        const isActiveDay = day <= 25;\r\n        return (\r\n            <div id={isCopy ? undefined : cellId}\r\n                className={'calendar-cell' + (isActiveDay ? ' pointer' : '')}\r\n                onClick={() => isActiveDay && onCellClick && onCellClick(day)}>\r\n                <span>{day}</span>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (<div className=\"calendar-cell gray\"><span></span></div>);\r\n    }\r\n}\r\n","import { useEffect, useRef } from 'react';\r\nimport CalendarCell from './CalendarCell';\r\nimport { calendarCellId } from './helpers';\r\n\r\nfunction getPopupStyle(day: number | null, prevDay: number | null, state: 'start' | 'end'): React.CSSProperties {\r\n    // Skip invalid case.\r\n    if (!day && !prevDay) { return { visibility: 'hidden' }; }\r\n\r\n    // If we switch between cells, pretend that we closed the previous one.\r\n    if (day && prevDay) { prevDay = null; }\r\n\r\n    const cellId = day ? calendarCellId(day) : calendarCellId(prevDay as number);\r\n    const cell = document.getElementById(cellId) as HTMLDivElement;\r\n    const cellRect = cell.getBoundingClientRect();\r\n    const isOpenDirection = state === 'start' && day || state === 'end' && prevDay;\r\n    if (isOpenDirection) {\r\n        return {\r\n            visibility: 'hidden',\r\n            left: cellRect.x + 'px',\r\n            top: cellRect.y + 'px',\r\n            width: cellRect.width + 'px',\r\n            height: cellRect.height + 'px'\r\n        };\r\n    } else {\r\n        return {\r\n            visibility: 'visible',\r\n            left: '5vw',\r\n            top: '5vh',\r\n            height: '90vh',\r\n            maxHeight: '90vh',\r\n            width: '90vw',\r\n            maxWidth: '90vw',\r\n            // width: '90vw',\r\n            // height: '50vh',\r\n            // left: Math.max(11, cellRect.x - 50) + 'px',\r\n            // top: Math.max(11, cellRect.y - 50) + 'px',\r\n            // width: cellRect.width + 100 + 'px',\r\n            // height: cellRect.height + 100 + 'px'\r\n        };\r\n    }\r\n}\r\n\r\ninterface PopupProps {\r\n    day: number | null;\r\n    onClosed: () => void;\r\n}\r\n\r\nexport default function CalendarPopup({ day, onClosed }: PopupProps): JSX.Element {\r\n    const prevDayRef = useRef<number | null>(null);\r\n    const popupRef = useRef<HTMLDivElement>(null);\r\n    const style = getPopupStyle(day, prevDayRef.current, 'start');\r\n\r\n    // After the initial render, turn on transitions and enlarge popup.\r\n    useEffect(() => {\r\n        if (!popupRef.current) { return; }\r\n        popupRef.current.classList.remove('notransition');\r\n        if (day) {\r\n            popupRef.current.classList.add('open');\r\n        } else {\r\n            popupRef.current.classList.remove('open');\r\n        }\r\n        Object.assign(popupRef.current.style, getPopupStyle(day, prevDayRef.current, 'end'));\r\n        prevDayRef.current = day;\r\n    }, [day]);\r\n\r\n    return (\r\n        <div key={day} className={'popup notransition' + (day ? '' : ' open')}\r\n            style={style} ref={popupRef} onClick={() => onClosed()}>\r\n            <CalendarCell day={day ?? prevDayRef.current} isCopy={true} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport './Calendar.css';\r\nimport CalendarCell from './CalendarCell';\r\nimport Popup from './CalendarPopup';\r\n\r\nexport default function Calendar(): JSX.Element {\r\n    const rows = Array(5).fill(0).map((_, i) => Array(7).fill(0).map((_, j) => i * 7 + j - 1));\r\n    const [openedDay, setOpenedCell] = useState<number | null>(null);\r\n    const history = useHistory();\r\n    const onCellClick = (day: number | null) => {\r\n        history.push(day ? `/day/${day.toString().padStart(2, '0')}` : '/');\r\n        setOpenedCell(openedDay === day ? null : day);\r\n    };\r\n\r\n    return (<React.Fragment>\r\n        <Popup day={openedDay} onClosed={() => onCellClick(null)} />\r\n        <div className=\"calendar\">\r\n            {rows.map((row, rowIndex) => (\r\n                <div key={rowIndex}>\r\n                    {row.map(day => (\r\n                        <CalendarCell key={day} day={day} onCellClick={day => onCellClick(day)} />\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    </React.Fragment >);\r\n}\r\n","import './App.css';\r\nimport Calendar from './calendar/Calendar';\r\n\r\nfunction App(): JSX.Element {\r\n    return (\r\n        <div className=\"App\">\r\n            <Calendar />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Route, useParams } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nfunction RouteParser(): null {\r\n    const params = useParams() as { page: string; };\r\n    if (!('page' in params)) { return null; }\r\n    console.log(`navigation page param: ${params.page}`);\r\n    return null;\r\n}\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Route path=\"/day/:page\" >\r\n                <RouteParser />\r\n            </Route>\r\n            <App />\r\n        </BrowserRouter>\r\n    </React.StrictMode >,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}