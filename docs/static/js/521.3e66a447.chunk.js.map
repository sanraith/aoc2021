{"version":3,"file":"static/js/521.3e66a447.chunk.js","mappings":"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","sources":["core/solutionState.ts","core/solutionBase.ts","core/solutionInfo.ts","solutions/day22.ts","services/solution.worker.ts","core/solutionManager.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export type SolutionState = SolutionNotStarted | SolutionProgress | SolutionResult | SolutionError | SolutionCanceled;\r\n\r\nexport class SolutionNotStarted {\r\n    kind = 'not_started' as const;\r\n\r\n    constructor(\r\n        public part: number\r\n    ) { }\r\n}\r\n\r\nexport class SolutionProgress {\r\n    kind = 'progress' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public progress: number,\r\n        public timeMs: number = 0\r\n    ) { }\r\n}\r\n\r\nexport class SolutionResult {\r\n    kind = 'result' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public result: string | null,\r\n        public timeMs: number,\r\n        public visualizationData?: unknown\r\n    ) { }\r\n}\r\n\r\nexport class SolutionError {\r\n    kind = 'error' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public message: string,\r\n        public timeMs: number = 0\r\n    ) { }\r\n}\r\n\r\nexport class SolutionCanceled {\r\n    kind = 'canceled' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public timeMs: number = 0\r\n    ) { }\r\n}","import { lastValueFrom, Observable, Subscriber } from 'rxjs';\r\nimport { Stopwatch } from 'ts-stopwatch';\r\nimport { SolutionError, SolutionProgress, SolutionResult, SolutionState } from './solutionState';\r\n\r\ninterface CurrentSolution {\r\n    subscriber: Subscriber<SolutionState>;\r\n    activePart: number;\r\n    progressStopwatch: Stopwatch;\r\n    stopwatch: Stopwatch;\r\n}\r\n\r\nexport default abstract class SolutionBase {\r\n    /** Minimum elapsed milliseconds between progress updates. */\r\n    minTimeBetweenUpdatesMs = 20;\r\n\r\n    protected visualizationData?: unknown;\r\n    protected get input(): string { return this._input ?? ''; }\r\n    protected get inputLines(): string[] {\r\n        if (this._inputLines === undefined) {\r\n            this._inputLines = this.parseInputLines(this.input);\r\n        }\r\n        return this._inputLines;\r\n    }\r\n\r\n    private _input?: string;\r\n    private _inputLines?: string[];\r\n    private currentSolution?: CurrentSolution;\r\n\r\n    /**\r\n     * Initializes the solution with the given input.\r\n     * @param input \r\n     */\r\n    init(input: string): this {\r\n        this._input = input;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Solves a part asynchronously.\r\n     * @returns The result as string, or null if there was an error.\r\n     */\r\n    async solveAsync(part: 1 | 2): Promise<string | null> {\r\n        const state = await lastValueFrom(this.solveWithProgress(part));\r\n        switch (state.kind) {\r\n            case 'result': return state.result;\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Solves the given part with progress updates.\r\n     * @returns Observable usable to track the solution progress.\r\n     */\r\n    solveWithProgress(part: 1 | 2): Observable<SolutionState> {\r\n        return new Observable<SolutionState>(subscriber => {\r\n            if (!this._input) {\r\n                subscriber.error(new SolutionError(part, 'No input provided!'));\r\n                return;\r\n            }\r\n            if (this.currentSolution) {\r\n                subscriber.error(new SolutionError(part, 'Another solution is already in progress!'));\r\n                return;\r\n            }\r\n\r\n            const partFunction = part === 1 ? this.part1 : this.part2;\r\n            this.currentSolution = {\r\n                activePart: part,\r\n                subscriber: subscriber,\r\n                stopwatch: new Stopwatch(),\r\n                progressStopwatch: new Stopwatch()\r\n            };\r\n            this.visualizationData = null;\r\n            this.currentSolution.stopwatch.start();\r\n            this.currentSolution.progressStopwatch.start();\r\n\r\n            try {\r\n                const result = partFunction.apply(this) + '';\r\n                const timeMs = this.currentSolution.stopwatch.stop();\r\n                const resultPack = new SolutionResult(part, result, timeMs, this.visualizationData);\r\n                subscriber.next(resultPack);\r\n            } catch (exception) {\r\n                const timeMs = this.currentSolution.stopwatch.stop() ?? 0;\r\n                subscriber.next(new SolutionError(part, exception + '', timeMs));\r\n            } finally {\r\n                subscriber.complete();\r\n                this.visualizationData = null;\r\n                this.currentSolution = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Solution for part 1. */\r\n    protected abstract part1(): string | number;\r\n\r\n    /** Solution for part 2. */\r\n    protected abstract part2(): string | number;\r\n\r\n    /**\r\n     * Updates the progress of the solution.\r\n     * @param progress Status of the progress between 0..1.\r\n     */\r\n    protected updateProgress(progress: number): void {\r\n        const current = this.currentSolution;\r\n        if (current && current.progressStopwatch.getTime() > this.minTimeBetweenUpdatesMs) {\r\n            current.subscriber.next(\r\n                new SolutionProgress(current.activePart, progress, current.stopwatch.getTime())\r\n            );\r\n            current.progressStopwatch.start(true);\r\n        }\r\n    }\r\n\r\n    /** Throws an error. Placeholder for when there is no solution yet. */\r\n    protected noSolution(msg?: string): never {\r\n        throw new Error(msg);\r\n    }\r\n\r\n    /** Parses the input lines into a string array omitting the tailing empty lines. */\r\n    private parseInputLines(input: string): string[] {\r\n        const newLineRegex = /\\r\\n?|\\n/g;\r\n        const inputLines = input.split(newLineRegex);\r\n\r\n        let emptyCount: number;\r\n        const whiteSpaceLineRegex = /^\\s*$/gm;\r\n        for (emptyCount = 0; emptyCount < inputLines.length; emptyCount++) {\r\n            const line = inputLines[inputLines.length - emptyCount - 1];\r\n            if (!whiteSpaceLineRegex.test(line)) {\r\n                break;\r\n            }\r\n        }\r\n        inputLines.splice(inputLines.length - emptyCount, emptyCount);\r\n\r\n        return inputLines;\r\n    }\r\n}","import SolutionBase from './solutionBase';\r\n\r\nconst solutionInfoList: SolutionInfo[] = [];\r\n\r\nexport type Constructor<T> = {\r\n    new(...args: unknown[]): T;\r\n    readonly prototype: T;\r\n};\r\n\r\nexport type SolutionInfoParams = {\r\n    day: number;\r\n    title: string;\r\n};\r\n\r\nexport type SolutionInfo = SolutionInfoParams & {\r\n    ctor: Constructor<SolutionBase>;\r\n    create: () => SolutionBase;\r\n};\r\n\r\nexport function solutionInfo<TCtor extends Constructor<SolutionBase>>(day: number, title: string): (ctor: TCtor) => void;\r\nexport function solutionInfo<TCtor extends Constructor<SolutionBase>>(info: SolutionInfoParams): (ctor: TCtor) => void;\r\nexport function solutionInfo<TCtor extends Constructor<SolutionBase>>(...params: [number, string] | [SolutionInfoParams]): (ctor: TCtor) => void {\r\n    const info = typeof params[0] === 'number' ? { day: params[0], title: params[1] as string } : params[0];\r\n    return (ctor: TCtor): void => {\r\n        solutionInfoList.push({\r\n            ...info,\r\n            ctor: ctor,\r\n            create: () => new ctor()\r\n        });\r\n    };\r\n}\r\n\r\nexport { solutionInfoList };\r\n\r\n","import SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\n@solutionInfo({\r\n    day: 22,\r\n    title: 'Crab Combat'\r\n})\r\nexport class Day22 extends SolutionBase {\r\n    isLogEnabled = false;\r\n\r\n    private gameCount!: number;\r\n\r\n    protected part1(): number {\r\n        const decks = this.parseDecks();\r\n        this.playGame(decks, { isRecursive: false });\r\n        this.part2();\r\n        return this.calculateScore(decks);\r\n    }\r\n\r\n    protected part2(): number {\r\n        const decks = this.parseDecks();\r\n        this.playGame(decks, { isRecursive: true });\r\n        return this.calculateScore(decks);\r\n    }\r\n\r\n    private calculateScore(decks: number[][]) {\r\n        return decks.filter(x => x.length > 0)[0]\r\n            .reverse()\r\n            .reduce((a, x, i) => a + x * (i + 1), 0);\r\n    }\r\n\r\n    private playGame(decks: number[][], options: { isRecursive: boolean; }): number {\r\n        const states = new Set<string>();\r\n        const gameCount = ++this.gameCount;\r\n        let roundCount = 0;\r\n\r\n        if (this.isLogEnabled) {\r\n            console.log(`\\n== Game ${gameCount} ==`);\r\n        }\r\n\r\n        while (decks[0].length > 0 && decks[1].length > 0) {\r\n            roundCount++;\r\n            if (gameCount === 1) {\r\n                this.updateProgress(Math.max(decks[0].length, decks[1].length) / (decks[0].length + decks[1].length));\r\n            }\r\n\r\n            if (this.isLogEnabled) {\r\n                console.log(`\\n-- Round ${roundCount} (Game ${gameCount}) --`);\r\n                decks.forEach((d, i) => console.log(`Player ${i + 1}'s deck: ${d.join(', ')}`));\r\n            }\r\n\r\n            // Rule 1 - Player 1 wins game if a state have been seen before\r\n            const state = this.getState(decks);\r\n            if (states.has(state)) {\r\n                return 0;\r\n            }\r\n            states.add(state);\r\n\r\n            // Rule 2 - Continue as normal\r\n            const dealt = decks.map(d => d.shift()!);\r\n            const [a, b] = dealt;\r\n\r\n            if (this.isLogEnabled) { dealt.forEach((c, i) => console.log(`Player ${i + 1} plays: ${c}`)); }\r\n\r\n            // Rule 3 - Play recursive combat if both players have at least as many cards\r\n            // remaining in their deck as the value of the card they just drew\r\n            let winnerId = a > b ? 0 : 1;\r\n            if (options.isRecursive && decks[0].length >= a && decks[1].length >= b) {\r\n                if (this.isLogEnabled) { console.log('Playing a sub-game to determine a winner...'); }\r\n\r\n                const copiedDecks = decks.map((d, i) => d.slice(0, dealt[i]));\r\n                winnerId = this.playGame(copiedDecks, options);\r\n\r\n                if (this.isLogEnabled) { console.log(`\\n...anyway, back to game ${gameCount}.`); }\r\n            }\r\n\r\n            if (winnerId === 0) {\r\n                decks[0].push(a, b);\r\n            } else {\r\n                decks[1].push(b, a);\r\n            }\r\n\r\n            if (this.isLogEnabled) { console.log(`Player ${winnerId + 1} wins round ${roundCount} of game ${gameCount}!`); }\r\n        }\r\n\r\n        const winnerId = decks.findIndex(d => d.length > 0);\r\n\r\n        if (this.isLogEnabled) {\r\n            console.log(`The winner of game ${gameCount} is player ${winnerId + 1}!`);\r\n            if (gameCount === 1) {\r\n                console.log('\\n\\n== Post-game results ==');\r\n                decks.forEach((d, i) => console.log(`Player ${i + 1}'s deck: ${d.join(', ')}`));\r\n            }\r\n        }\r\n\r\n        return winnerId;\r\n    }\r\n\r\n    private getState(decks: number[][]) {\r\n        return decks[0].join(',') + '|' + decks[1].join(',');\r\n    }\r\n\r\n    private parseDecks(): number[][] {\r\n        const decks: number[][] = [];\r\n        let lineIndex = 0;\r\n        let line: string;\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            lineIndex++;\r\n            const deck: number[] = [];\r\n            while ((line = this.inputLines[lineIndex++]) && line.length > 0) {\r\n                deck.push(parseInt(line));\r\n            }\r\n            decks.push(deck);\r\n        }\r\n\r\n        this.gameCount = 0;\r\n\r\n        return decks;\r\n    }\r\n}\r\n","/// <reference lib=\"webworker\" />\r\n\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport solutionManager from '../core/solutionManager';\r\nimport { SolutionResult } from '../core/solutionState';\r\nimport SolveRequest from './solveRequest';\r\n\r\nconst solutionInfos = solutionManager.getSolutionsByDay();\r\n\r\ninterface WorkerRequest {\r\n    data: SolveRequest;\r\n}\r\n\r\naddEventListener('message', async ({ data }: WorkerRequest) => {\r\n    const solutionInfo = solutionInfos.get(data.day);\r\n    if (!solutionInfo) { return; }\r\n\r\n    const solution = solutionInfo.create();\r\n    solution.init(data.input);\r\n\r\n    for (const part of [1, 2] as const) {\r\n        const observable = solution.solveWithProgress(part);\r\n        await lastValueFrom(observable.pipe(\r\n            tap(state => postMessage(state))\r\n        ));\r\n    }\r\n\r\n    // Post an invalid result to mark the end of the work.\r\n    postMessage(new SolutionResult(-1, null, 0));\r\n});\r\n","import '../solutions';\r\nimport { SolutionInfo, solutionInfoList } from './solutionInfo';\r\n\r\nclass SolutionManager {\r\n    /** Get the solutions in a (day, solutionInfo) map. */\r\n    getSolutionsByDay(): Map<number, SolutionInfo> {\r\n        return new Map(solutionInfoList.map(info => [info.day, info]));\r\n    }\r\n\r\n    /** Get the solutions in ascending order by day. */\r\n    getSolutions(): SolutionInfo[] {\r\n        return Array.from(this.getSolutionsByDay().values()).sort((a, b) => a.day - b.day);\r\n    }\r\n}\r\n\r\nconst solutionManager = new SolutionManager();\r\n\r\nexport default solutionManager;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [487], function() { return __webpack_require__(521); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"8dc0e7a2\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/aoc2021/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t521: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkaoc2021\"] = self[\"webpackChunkaoc2021\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(487).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["SolutionProgress","part","progress","timeMs","kind","SolutionResult","result","visualizationData","SolutionError","message","SolutionBase","minTimeBetweenUpdatesMs","_input","_inputLines","currentSolution","this","undefined","parseInputLines","input","lastValueFrom","solveWithProgress","state","Observable","subscriber","error","partFunction","part1","part2","activePart","stopwatch","Stopwatch","progressStopwatch","start","apply","stop","resultPack","next","exception","complete","current","getTime","msg","Error","emptyCount","inputLines","split","whiteSpaceLineRegex","length","line","test","splice","solutionInfoList","info","day","title","ctor","push","create","solutionInfo","isLogEnabled","gameCount","decks","parseDecks","playGame","isRecursive","calculateScore","filter","x","reverse","reduce","a","i","options","states","Set","roundCount","console","log","updateProgress","Math","max","forEach","d","join","getState","has","add","dealt","map","shift","b","c","winnerId","copiedDecks","slice","findIndex","lineIndex","deck","parseInt","solutionInfos","SolutionManager","Map","Array","from","getSolutionsByDay","values","sort","solutionManager","addEventListener","data","get","solution","init","observable","pipe","tap","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","r","n","getter","__esModule","definition","o","defineProperty","enumerable","f","e","chunkId","Promise","all","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","pop","then"],"sourceRoot":""}