{"version":3,"file":"static/js/20.f4642d68.chunk.js","mappings":"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","sources":["core/solutionState.ts","core/solutionBase.ts","core/solutionInfo.ts","solutions/day01.ts","services/solution.worker.ts","solutions/day02.ts","solutions/day03.ts","solutions/day04.ts","solutions/day05.ts","solutions/day22.ts","core/solutionManager.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export type SolutionState = SolutionNotStarted | SolutionProgress | SolutionResult | SolutionError | SolutionCanceled;\r\n\r\nexport class SolutionNotStarted {\r\n    kind = 'not_started' as const;\r\n\r\n    constructor(\r\n        public part: number\r\n    ) { }\r\n}\r\n\r\nexport class SolutionProgress {\r\n    kind = 'progress' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public progress: number,\r\n        public timeMs: number = 0\r\n    ) { }\r\n}\r\n\r\nexport class SolutionResult {\r\n    kind = 'result' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public result: string | null,\r\n        public timeMs: number,\r\n        public visualizationData?: unknown\r\n    ) { }\r\n}\r\n\r\nexport class SolutionError {\r\n    kind = 'error' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public message: string,\r\n        public timeMs: number = 0\r\n    ) { }\r\n}\r\n\r\nexport class SolutionCanceled {\r\n    kind = 'canceled' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public timeMs: number = 0\r\n    ) { }\r\n}","import { lastValueFrom, Observable, Subscriber } from 'rxjs';\r\nimport { Stopwatch } from 'ts-stopwatch';\r\nimport { SolutionError, SolutionProgress, SolutionResult, SolutionState } from './solutionState';\r\n\r\ninterface CurrentSolution {\r\n    subscriber: Subscriber<SolutionState>;\r\n    activePart: number;\r\n    progressStopwatch: Stopwatch;\r\n    stopwatch: Stopwatch;\r\n}\r\n\r\nexport default abstract class SolutionBase {\r\n    minTimeBetweenUpdatesMs = 20;\r\n\r\n    protected visualizationData?: unknown;\r\n    protected get input(): string { return this._input ?? ''; }\r\n    protected get inputLines(): string[] {\r\n        if (this._inputLines === undefined) {\r\n            this._inputLines = this.parseInputLines(this.input);\r\n        }\r\n        return this._inputLines;\r\n    }\r\n\r\n    private _input?: string;\r\n    private _inputLines?: string[];\r\n    private currentSolution?: CurrentSolution;\r\n\r\n    init(input: string): this {\r\n        this._input = input;\r\n        return this;\r\n    }\r\n\r\n    async solveAsync(part: 1 | 2): Promise<string | null> {\r\n        const state = await lastValueFrom(this.solveWithProgress(part));\r\n        switch (state.kind) {\r\n            case 'result': return state.result;\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    solveWithProgress(part: 1 | 2): Observable<SolutionState> {\r\n        return new Observable<SolutionState>(subscriber => {\r\n            if (!this._input) {\r\n                subscriber.error(new SolutionError(part, 'No input provided!'));\r\n                return;\r\n            }\r\n            if (this.currentSolution) {\r\n                subscriber.error(new SolutionError(part, 'Another solution is already in progress!'));\r\n                return;\r\n            }\r\n\r\n            const partFunction = part === 1 ? this.part1 : this.part2;\r\n            this.currentSolution = {\r\n                activePart: part,\r\n                subscriber: subscriber,\r\n                stopwatch: new Stopwatch(),\r\n                progressStopwatch: new Stopwatch()\r\n            };\r\n            this.visualizationData = null;\r\n            this.currentSolution.stopwatch.start();\r\n            this.currentSolution.progressStopwatch.start();\r\n\r\n            try {\r\n                const result = partFunction.apply(this) + '';\r\n                const timeMs = this.currentSolution.stopwatch.stop();\r\n                const resultPack = new SolutionResult(part, result, timeMs, this.visualizationData);\r\n                subscriber.next(resultPack);\r\n            } catch (exception) {\r\n                const timeMs = this.currentSolution.stopwatch.stop() ?? 0;\r\n                subscriber.next(new SolutionError(part, exception + '', timeMs));\r\n            } finally {\r\n                subscriber.complete();\r\n                this.visualizationData = null;\r\n                this.currentSolution = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected abstract part1(): string | number;\r\n\r\n    protected abstract part2(): string | number;\r\n\r\n    protected updateProgress(progress: number): void {\r\n        const current = this.currentSolution;\r\n        if (current && current.progressStopwatch.getTime() > this.minTimeBetweenUpdatesMs) {\r\n            current.subscriber.next(\r\n                new SolutionProgress(current.activePart, progress, current.stopwatch.getTime())\r\n            );\r\n            current.progressStopwatch.start(true);\r\n        }\r\n    }\r\n\r\n    protected noSolution(msg?: string): never {\r\n        throw new Error(msg);\r\n    }\r\n\r\n    private parseInputLines(input: string): string[] {\r\n        const newLineRegex = /\\r\\n?|\\n/g;\r\n        const inputLines = input.split(newLineRegex);\r\n\r\n        let emptyCount: number;\r\n        const whiteSpaceLineRegex = /^\\s*$/gm;\r\n        for (emptyCount = 0; emptyCount < inputLines.length; emptyCount++) {\r\n            const line = inputLines[inputLines.length - emptyCount - 1];\r\n            if (!whiteSpaceLineRegex.test(line)) {\r\n                break;\r\n            }\r\n        }\r\n        inputLines.splice(inputLines.length - emptyCount, emptyCount);\r\n\r\n        return inputLines;\r\n    }\r\n}","import SolutionBase from './solutionBase';\r\n\r\nconst solutionInfoList: SolutionInfo[] = [];\r\n\r\nexport type Constructor<T> = {\r\n    new(...args: unknown[]): T;\r\n    readonly prototype: T;\r\n};\r\n\r\nexport type SolutionInfoParams = {\r\n    day: number;\r\n    title: string;\r\n};\r\n\r\nexport type SolutionInfo = SolutionInfoParams & {\r\n    ctor: Constructor<SolutionBase>;\r\n    create: () => SolutionBase;\r\n};\r\n\r\nexport function solutionInfo<TCtor extends Constructor<SolutionBase>>(day: number, title: string): (ctor: TCtor) => void;\r\nexport function solutionInfo<TCtor extends Constructor<SolutionBase>>(info: SolutionInfoParams): (ctor: TCtor) => void;\r\nexport function solutionInfo<TCtor extends Constructor<SolutionBase>>(...params: [number, string] | [SolutionInfoParams]): (ctor: TCtor) => void {\r\n    const info = typeof params[0] === 'number' ? { day: params[0], title: params[1] as string } : params[0];\r\n    return (ctor: TCtor): void => {\r\n        solutionInfoList.push({\r\n            ...info,\r\n            ctor: ctor,\r\n            create: () => new ctor()\r\n        });\r\n    };\r\n}\r\n\r\nexport { solutionInfoList };\r\n\r\n","import { toInteger } from 'lodash';\r\nimport SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\nexport interface Day01Data {\r\n    numbers: number[],\r\n    i: number, j: number, k?: number,\r\n    checks: number[];\r\n}\r\n\r\n@solutionInfo({\r\n    day: 1,\r\n    title: 'Report Repair'\r\n})\r\nexport class Day01 extends SolutionBase {\r\n    protected visualizationData?: Day01Data;\r\n\r\n    protected part1(): number {\r\n        const checks: number[] = [];\r\n        const numbers = this.inputLines.map(x => toInteger(x));\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            const a = numbers[i];\r\n            for (let j = i + 1; j < numbers.length; j++) {\r\n                const b = numbers[j];\r\n                checks.push(i, j);\r\n                if (a + b === 2020) {\r\n                    this.visualizationData = { numbers, i, j, checks };\r\n                    return a * b;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.noSolution();\r\n    }\r\n\r\n    protected part2(): number {\r\n        const checks: number[] = [];\r\n        const numbers = this.inputLines.map(x => toInteger(x));\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            const a = numbers[i];\r\n            for (let j = i + 1; j < numbers.length; j++) {\r\n                const b = numbers[j];\r\n                for (let k = j + 1; k < numbers.length; k++) {\r\n                    const c = numbers[k];\r\n                    checks.push(i, j, k);\r\n\r\n                    // Fake work\r\n                    for (let t = 0; t < 1000; t++);\r\n\r\n                    if (a + b + c === 2020) {\r\n                        this.visualizationData = { numbers, i, j, k, checks };\r\n                        return a * b * c;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.noSolution();\r\n    }\r\n}\r\n","/// <reference lib=\"webworker\" />\r\n\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport solutionManager from '../core/solutionManager';\r\nimport { SolutionResult } from '../core/solutionState';\r\nimport SolveRequest from './solveRequest';\r\n\r\nconst solutionInfos = solutionManager.getSolutionsByDay();\r\n\r\ninterface WorkerRequest {\r\n    data: SolveRequest;\r\n}\r\n\r\naddEventListener('message', async ({ data }: WorkerRequest) => {\r\n    const solutionInfo = solutionInfos.get(data.day);\r\n    if (!solutionInfo) { return; }\r\n\r\n    const solution = solutionInfo.create();\r\n    solution.init(data.input);\r\n\r\n    for (const part of [1, 2] as const) {\r\n        const observable = solution.solveWithProgress(part);\r\n        await lastValueFrom(observable.pipe(\r\n            tap(state => postMessage(state))\r\n        ));\r\n    }\r\n\r\n    // Post an invalid result to mark the end of the work.\r\n    postMessage(new SolutionResult(-1, null, 0));\r\n});\r\n","import SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\n@solutionInfo({\r\n    day: 2,\r\n    title: 'Password Philosophy'\r\n})\r\nexport class Day02 extends SolutionBase {\r\n    private regex = /([0-9]+)-([0-9]+) ([a-z]): ([a-z]+)/g; // No need to reset it as we iterate over all results\r\n\r\n    protected part1(): number {\r\n        let validCount = 0;\r\n        let record: RegExpExecArray;\r\n        while ((record = this.regex.exec(this.input)!)) {\r\n            const [, min, max, c, pass] = record;\r\n            const cCount = pass.split(c).length - 1;\r\n            if (cCount >= parseInt(min) && cCount <= parseInt(max)) {\r\n                validCount++;\r\n            }\r\n        }\r\n\r\n        return validCount;\r\n    }\r\n\r\n    protected part2(): number {\r\n        let validCount = 0;\r\n        let record: RegExpExecArray;\r\n        while ((record = this.regex.exec(this.input)!)) {\r\n            const [, first, second, c, pass] = record;\r\n            const isValid = (pass[parseInt(first) - 1] === c) !== (pass[parseInt(second) - 1] === c);\r\n            if (isValid) {\r\n                validCount++;\r\n            }\r\n        }\r\n\r\n        return validCount;\r\n    }\r\n}\r\n","import SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\ntype Pos = {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\n@solutionInfo({\r\n    day: 3,\r\n    title: 'Toboggan Trajectory'\r\n})\r\nexport class Day03 extends SolutionBase {\r\n\r\n    protected part1(): number {\r\n        const slope = { x: 3, y: 1 };\r\n        const treeCount = this.getTreeCount(slope);\r\n\r\n        return treeCount;\r\n    }\r\n\r\n    protected part2(): number {\r\n        const slopes = [[1, 1], [3, 1], [5, 1], [7, 1], [1, 2]].map(p => ({ x: p[0], y: p[1] }));\r\n        const treeCounts = slopes.map(p => this.getTreeCount(p));\r\n        const result = treeCounts.reduce((a, c) => a * c, 1);\r\n\r\n        return result;\r\n    }\r\n\r\n    private getTreeCount(slope: Pos): number {\r\n        const map = this.inputLines;\r\n        const width = map[0].length;\r\n        const height = map.length;\r\n\r\n        let pos = { x: 0, y: 0 };\r\n        let treeCount = 0;\r\n        while (pos.y < height) {\r\n            const isTree = map[pos.y][pos.x % width] === '#';\r\n            if (isTree) {\r\n                treeCount++;\r\n            }\r\n            pos = this.add(pos, slope);\r\n        }\r\n\r\n        return treeCount;\r\n    }\r\n\r\n    private add(a: Pos, b: Pos): Pos {\r\n        return { x: a.x + b.x, y: a.y + b.y };\r\n    }\r\n}\r\n","import SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\ntype Validator = {\r\n    field: string,\r\n    validate: (value: string) => boolean;\r\n};\r\n\r\n@solutionInfo({\r\n    day: 4,\r\n    title: 'Passport Processing'\r\n})\r\nexport class Day04 extends SolutionBase {\r\n\r\n    private fieldValidators: Validator[] = [\r\n        ['byr', this.createYearValidator(1920, 2002)],\r\n        ['iyr', this.createYearValidator(2010, 2020)],\r\n        ['eyr', this.createYearValidator(2020, 2030)],\r\n        ['hgt', this.heightValidator],\r\n        ['hcl', (v: string) => /^#[0-9a-f]{6}$/g.test(v)],\r\n        ['ecl', (v: string) => /^(amb|blu|brn|gry|grn|hzl|oth)$/g.test(v)],\r\n        ['pid', this.createNumberValidator(9)]\r\n    ].map(x => <Validator>{ field: x[0], validate: x[1] });\r\n\r\n    protected part1(): number {\r\n        const validCount = this.getPassports()\r\n            .filter(p => this.fieldValidators.every(v => p.has(v.field)))\r\n            .length;\r\n\r\n        return validCount;\r\n    }\r\n\r\n    protected part2(): number {\r\n        const validCount = this.getPassports()\r\n            .filter(p => this.fieldValidators.every(v => p.has(v.field)))\r\n            .filter(p => this.fieldValidators.every(v => v.validate(p.get(v.field)!)))\r\n            .length;\r\n\r\n        return validCount;\r\n    }\r\n\r\n    private createNumberValidator(digits: number) {\r\n        return (value: string) => new RegExp(`^[0-9]{${digits}}$`).test(value);\r\n    }\r\n\r\n    private createYearValidator(min: number, max: number) {\r\n        const isFourDigitNumber = this.createNumberValidator(4);\r\n        return (value: string) => {\r\n            if (!isFourDigitNumber(value)) { return false; }\r\n\r\n            const number = parseInt(value);\r\n            return number >= min && number <= max;\r\n        };\r\n    }\r\n\r\n    private heightValidator(value: string) {\r\n        const heightRegex = /^([0-9]+)(?:cm|in)$/;\r\n        if (!heightRegex.test(value)) { return false; }\r\n\r\n        const number = parseInt(heightRegex.exec(value)![1]);\r\n        if (value.indexOf('cm') >= 0) {\r\n            return number >= 150 && number <= 193;\r\n        }\r\n        return number >= 59 && number <= 76; // 'in'\r\n    }\r\n\r\n    private getPassports(): Map<string, string>[] {\r\n        const passportRegex = /([a-z]{3}):(\\S+)/g;\r\n        const doubleNewLineRegex = /\\r\\n\\r\\n|\\n\\n/g;\r\n        const passportStrings = this.input.split(doubleNewLineRegex);\r\n        const passports: Map<string, string>[] = [];\r\n\r\n        for (const passportString of passportStrings) {\r\n            const passport = new Map();\r\n            let record: RegExpExecArray;\r\n            while ((record = passportRegex.exec(passportString)!)) {\r\n                const [, key, value] = record;\r\n                passport.set(key, value);\r\n            }\r\n            passports.push(passport);\r\n        }\r\n\r\n        return passports;\r\n    }\r\n}\r\n","import _ from 'lodash';\r\nimport SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\n@solutionInfo({\r\n    day: 5,\r\n    title: 'Binary Boarding'\r\n})\r\nexport class Day05 extends SolutionBase {\r\n\r\n    protected part1(): number {\r\n        const highestId = _(this.inputLines).map(s => this.decode(s).id).max()!;\r\n        return highestId;\r\n    }\r\n\r\n    protected part2(): number {\r\n        const seats = new Map(this.inputLines.map(s => this.decode(s)).map(s => [s.id, s]));\r\n\r\n        for (const seat of seats.values()) {\r\n            if (!seats.has(seat.id + 1) && seats.has(seat.id + 2)) {\r\n                return seat.id + 1;\r\n            }\r\n        }\r\n\r\n        this.noSolution();\r\n    }\r\n\r\n    private decode(seatStr: string): { row: number, column: number, id: number; } {\r\n        const rowPart = seatStr.slice(0, 7);\r\n        const columnPart = seatStr.slice(7, 10);\r\n\r\n        const binaryRow = rowPart.replace(/F/g, '0').replace(/B/g, '1');\r\n        const binaryColumn = columnPart.replace(/L/g, '0').replace(/R/g, '1');\r\n\r\n        const row = parseInt(binaryRow, 2);\r\n        const column = parseInt(binaryColumn, 2);\r\n\r\n        return {\r\n            row: row,\r\n            column: column,\r\n            id: row * 8 + column\r\n        };\r\n    }\r\n}\r\n","import SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\n@solutionInfo({\r\n    day: 22,\r\n    title: 'Crab Combat'\r\n})\r\nexport class Day22 extends SolutionBase {\r\n    isLogEnabled = false;\r\n\r\n    private gameCount!: number;\r\n\r\n    protected part1(): number {\r\n        const decks = this.parseDecks();\r\n        this.playGame(decks, { isRecursive: false });\r\n        this.part2();\r\n        return this.calculateScore(decks);\r\n    }\r\n\r\n    protected part2(): number {\r\n        const decks = this.parseDecks();\r\n        this.playGame(decks, { isRecursive: true });\r\n        return this.calculateScore(decks);\r\n    }\r\n\r\n    private calculateScore(decks: number[][]) {\r\n        return decks.filter(x => x.length > 0)[0]\r\n            .reverse()\r\n            .reduce((a, x, i) => a + x * (i + 1), 0);\r\n    }\r\n\r\n    private playGame(decks: number[][], options: { isRecursive: boolean; }): number {\r\n        const states = new Set<string>();\r\n        const gameCount = ++this.gameCount;\r\n        let roundCount = 0;\r\n\r\n        if (this.isLogEnabled) {\r\n            console.log(`\\n== Game ${gameCount} ==`);\r\n        }\r\n\r\n        while (decks[0].length > 0 && decks[1].length > 0) {\r\n            roundCount++;\r\n            if (gameCount === 1) {\r\n                this.updateProgress(Math.max(decks[0].length, decks[1].length) / (decks[0].length + decks[1].length));\r\n            }\r\n\r\n            if (this.isLogEnabled) {\r\n                console.log(`\\n-- Round ${roundCount} (Game ${gameCount}) --`);\r\n                decks.forEach((d, i) => console.log(`Player ${i + 1}'s deck: ${d.join(', ')}`));\r\n            }\r\n\r\n            // Rule 1 - Player 1 wins game if a state have been seen before\r\n            const state = this.getState(decks);\r\n            if (states.has(state)) {\r\n                return 0;\r\n            }\r\n            states.add(state);\r\n\r\n            // Rule 2 - Continue as normal\r\n            const dealt = decks.map(d => d.shift()!);\r\n            const [a, b] = dealt;\r\n\r\n            if (this.isLogEnabled) { dealt.forEach((c, i) => console.log(`Player ${i + 1} plays: ${c}`)); }\r\n\r\n            // Rule 3 - Play recursive combat if both players have at least as many cards\r\n            // remaining in their deck as the value of the card they just drew\r\n            let winnerId = a > b ? 0 : 1;\r\n            if (options.isRecursive && decks[0].length >= a && decks[1].length >= b) {\r\n                if (this.isLogEnabled) { console.log('Playing a sub-game to determine a winner...'); }\r\n\r\n                const copiedDecks = decks.map((d, i) => d.slice(0, dealt[i]));\r\n                winnerId = this.playGame(copiedDecks, options);\r\n\r\n                if (this.isLogEnabled) { console.log(`\\n...anyway, back to game ${gameCount}.`); }\r\n            }\r\n\r\n            if (winnerId === 0) {\r\n                decks[0].push(a, b);\r\n            } else {\r\n                decks[1].push(b, a);\r\n            }\r\n\r\n            if (this.isLogEnabled) { console.log(`Player ${winnerId + 1} wins round ${roundCount} of game ${gameCount}!`); }\r\n        }\r\n\r\n        const winnerId = decks.findIndex(d => d.length > 0);\r\n\r\n        if (this.isLogEnabled) {\r\n            console.log(`The winner of game ${gameCount} is player ${winnerId + 1}!`);\r\n            if (gameCount === 1) {\r\n                console.log('\\n\\n== Post-game results ==');\r\n                decks.forEach((d, i) => console.log(`Player ${i + 1}'s deck: ${d.join(', ')}`));\r\n            }\r\n        }\r\n\r\n        return winnerId;\r\n    }\r\n\r\n    private getState(decks: number[][]) {\r\n        return decks[0].join(',') + '|' + decks[1].join(',');\r\n    }\r\n\r\n    private parseDecks(): number[][] {\r\n        const decks: number[][] = [];\r\n        let lineIndex = 0;\r\n        let line: string;\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            lineIndex++;\r\n            const deck: number[] = [];\r\n            while ((line = this.inputLines[lineIndex++]) && line.length > 0) {\r\n                deck.push(parseInt(line));\r\n            }\r\n            decks.push(deck);\r\n        }\r\n\r\n        this.gameCount = 0;\r\n\r\n        return decks;\r\n    }\r\n}\r\n","import '../solutions';\r\nimport { SolutionInfo, solutionInfoList } from './solutionInfo';\r\n\r\nclass SolutionManager {\r\n    /** Get the solutions in a (day, solutionInfo) map. */\r\n    getSolutionsByDay(): Map<number, SolutionInfo> {\r\n        return new Map(solutionInfoList.map(info => [info.day, info]));\r\n    }\r\n\r\n    /** Get the solutions in ascending order by day. */\r\n    getSolutions(): SolutionInfo[] {\r\n        return Array.from(this.getSolutionsByDay().values()).sort((a, b) => a.day - b.day);\r\n    }\r\n}\r\n\r\nconst solutionManager = new SolutionManager();\r\n\r\nexport default solutionManager;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [480], function() { return __webpack_require__(5020); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"401139d8\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/aoc2021/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t20: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkaoc2021\"] = self[\"webpackChunkaoc2021\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(480).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["SolutionProgress","part","progress","timeMs","kind","SolutionResult","result","visualizationData","SolutionError","message","SolutionBase","minTimeBetweenUpdatesMs","_input","_inputLines","currentSolution","this","undefined","parseInputLines","input","lastValueFrom","solveWithProgress","state","Observable","subscriber","error","partFunction","part1","part2","activePart","stopwatch","Stopwatch","progressStopwatch","start","apply","stop","resultPack","next","exception","complete","current","getTime","msg","Error","emptyCount","inputLines","split","whiteSpaceLineRegex","length","line","test","splice","solutionInfoList","solutionInfo","info","day","title","ctor","push","create","checks","numbers","map","x","toInteger","i","a","j","b","noSolution","k","c","t","solutionInfos","regex","record","validCount","exec","min","max","cCount","parseInt","first","second","pass","getTreeCount","y","p","reduce","slope","width","height","pos","treeCount","add","fieldValidators","createYearValidator","heightValidator","v","createNumberValidator","field","validate","getPassports","filter","every","has","get","digits","value","RegExp","isFourDigitNumber","number","heightRegex","indexOf","passportRegex","passportStrings","passports","passportString","passport","Map","key","set","_","s","decode","id","seats","values","seat","seatStr","rowPart","slice","columnPart","binaryRow","replace","binaryColumn","row","column","isLogEnabled","gameCount","decks","parseDecks","playGame","isRecursive","calculateScore","reverse","options","states","Set","roundCount","console","log","updateProgress","Math","forEach","d","join","getState","dealt","shift","winnerId","copiedDecks","findIndex","lineIndex","deck","SolutionManager","Array","from","getSolutionsByDay","sort","solutionManager","addEventListener","data","solution","init","observable","pipe","tap","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","r","n","getter","__esModule","definition","o","defineProperty","enumerable","f","e","chunkId","Promise","all","promises","u","miniCssF","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","nmd","paths","children","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","pop","then"],"sourceRoot":""}