{"version":3,"file":"static/js/459.0d7b1e42.chunk.js","mappings":"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","sources":["core/solutionState.ts","core/solutionBase.ts","core/solutionInfo.ts","solutions/day01.ts","core/helpers.ts","solutions/day02.ts","solutions/day03.ts","solutions/day04.ts","solutions/day05.ts","solutions/day06.ts","solutions/day07.ts","web/services/solution.worker.ts","core/solutionManager.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export type SolutionState = SolutionNotStarted | SolutionProgress | SolutionResult | SolutionError | SolutionCanceled;\r\n\r\nexport class SolutionNotStarted {\r\n    kind = 'not_started' as const;\r\n\r\n    constructor(\r\n        public part: number\r\n    ) { }\r\n}\r\n\r\nexport class SolutionProgress {\r\n    kind = 'progress' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public progress: number,\r\n        public timeMs: number = 0\r\n    ) { }\r\n}\r\n\r\nexport class SolutionResult {\r\n    kind = 'result' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public result: string | null,\r\n        public timeMs: number,\r\n        public visualizationData?: unknown\r\n    ) { }\r\n}\r\n\r\nexport class SolutionError {\r\n    kind = 'error' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public message: string,\r\n        public timeMs: number = 0\r\n    ) { }\r\n}\r\n\r\nexport class SolutionCanceled {\r\n    kind = 'canceled' as const;\r\n\r\n    constructor(\r\n        public part: number,\r\n        public timeMs: number = 0\r\n    ) { }\r\n}","import { lastValueFrom, Observable, Subscriber } from 'rxjs';\r\nimport { Stopwatch } from 'ts-stopwatch';\r\nimport { SolutionError, SolutionProgress, SolutionResult, SolutionState } from './solutionState';\r\n\r\ninterface CurrentSolution {\r\n    subscriber: Subscriber<SolutionState>;\r\n    activePart: number;\r\n    progressStopwatch: Stopwatch;\r\n    stopwatch: Stopwatch;\r\n}\r\n\r\nexport default abstract class SolutionBase {\r\n    /** Minimum elapsed milliseconds between progress updates. */\r\n    minTimeBetweenUpdatesMs = 20;\r\n\r\n    protected visualizationData?: unknown;\r\n    protected get input(): string { return this._input ?? ''; }\r\n    protected get inputLines(): string[] {\r\n        if (this._inputLines === undefined) {\r\n            this._inputLines = this.parseInputLines(this.input);\r\n        }\r\n        return this._inputLines;\r\n    }\r\n\r\n    private _input?: string;\r\n    private _inputLines?: string[];\r\n    private currentSolution?: CurrentSolution;\r\n\r\n    /**\r\n     * Initializes the solution with the given input.\r\n     * @param input \r\n     */\r\n    init(input: string): this {\r\n        this._input = input;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Solves a part asynchronously.\r\n     * @returns The result as string, or null if there was an error.\r\n     */\r\n    async solveAsync(part: 1 | 2): Promise<string | null> {\r\n        const state = await lastValueFrom(this.solveWithProgress(part));\r\n        switch (state.kind) {\r\n            case 'result': return state.result;\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Solves the given part with progress updates.\r\n     * @returns Observable usable to track the solution progress.\r\n     */\r\n    solveWithProgress(part: 1 | 2): Observable<SolutionState> {\r\n        return new Observable<SolutionState>(subscriber => {\r\n            if (!this._input) {\r\n                subscriber.error(new SolutionError(part, 'No input provided!'));\r\n                return;\r\n            }\r\n            if (this.currentSolution) {\r\n                subscriber.error(new SolutionError(part, 'Another solution is already in progress!'));\r\n                return;\r\n            }\r\n\r\n            const partFunction = part === 1 ? this.part1 : this.part2;\r\n            this.currentSolution = {\r\n                activePart: part,\r\n                subscriber: subscriber,\r\n                stopwatch: new Stopwatch(),\r\n                progressStopwatch: new Stopwatch()\r\n            };\r\n            this.visualizationData = null;\r\n            this.currentSolution.stopwatch.start();\r\n            this.currentSolution.progressStopwatch.start();\r\n\r\n            try {\r\n                const result = partFunction.apply(this) + '';\r\n                const timeMs = this.currentSolution.stopwatch.stop();\r\n                const resultPack = new SolutionResult(part, result, timeMs, this.visualizationData);\r\n                subscriber.next(resultPack);\r\n            } catch (exception) {\r\n                const timeMs = this.currentSolution.stopwatch.stop() ?? 0;\r\n                subscriber.next(new SolutionError(part, exception + '', timeMs));\r\n            } finally {\r\n                subscriber.complete();\r\n                this.visualizationData = null;\r\n                this.currentSolution = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Solution for part 1. */\r\n    protected abstract part1(): string | number;\r\n\r\n    /** Solution for part 2. */\r\n    protected abstract part2(): string | number;\r\n\r\n    /**\r\n     * Updates the progress of the solution.\r\n     * @param progress Status of the progress between 0..1.\r\n     */\r\n    protected updateProgress(progress: number): void {\r\n        const current = this.currentSolution;\r\n        if (current && current.progressStopwatch.getTime() > this.minTimeBetweenUpdatesMs) {\r\n            current.subscriber.next(\r\n                new SolutionProgress(current.activePart, progress, current.stopwatch.getTime())\r\n            );\r\n            current.progressStopwatch.start(true);\r\n        }\r\n    }\r\n\r\n    /** Throws an error. Placeholder for when there is no solution yet. */\r\n    protected noSolution(msg?: string): never {\r\n        msg = msg ?? 'No solution available.';\r\n        throw new Error(msg);\r\n    }\r\n\r\n    /** Parses the input lines into a string array omitting the tailing empty lines. */\r\n    private parseInputLines(input: string): string[] {\r\n        const newLineRegex = /\\r\\n?|\\n/g;\r\n        const inputLines = input.split(newLineRegex);\r\n\r\n        let emptyCount: number;\r\n        const whiteSpaceLineRegex = /^\\s*$/gm;\r\n        for (emptyCount = 0; emptyCount < inputLines.length; emptyCount++) {\r\n            const line = inputLines[inputLines.length - emptyCount - 1];\r\n            if (!whiteSpaceLineRegex.test(line)) {\r\n                break;\r\n            }\r\n        }\r\n        inputLines.splice(inputLines.length - emptyCount, emptyCount);\r\n\r\n        return inputLines;\r\n    }\r\n}","import SolutionBase from './solutionBase';\r\n\r\nconst solutionInfoList: SolutionInfo[] = [];\r\n\r\nexport type Constructor<T> = {\r\n    new(...args: unknown[]): T;\r\n    readonly prototype: T;\r\n};\r\n\r\nexport type SolutionInfoParams = {\r\n    day: number;\r\n    title: string;\r\n};\r\n\r\nexport type SolutionInfo = SolutionInfoParams & {\r\n    ctor: Constructor<SolutionBase>;\r\n    create: () => SolutionBase;\r\n};\r\n\r\nexport function solutionInfo<TCtor extends Constructor<SolutionBase>>(day: number, title: string): (ctor: TCtor) => void;\r\nexport function solutionInfo<TCtor extends Constructor<SolutionBase>>(info: SolutionInfoParams): (ctor: TCtor) => void;\r\nexport function solutionInfo<TCtor extends Constructor<SolutionBase>>(...params: [number, string] | [SolutionInfoParams]): (ctor: TCtor) => void {\r\n    const info = typeof params[0] === 'number' ? { day: params[0], title: params[1] as string } : params[0];\r\n    return (ctor: TCtor): void => {\r\n        solutionInfoList.push({\r\n            ...info,\r\n            ctor: ctor,\r\n            create: () => new ctor()\r\n        });\r\n    };\r\n}\r\n\r\nexport { solutionInfoList };\r\n\r\n","import SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\n@solutionInfo({\r\n    day: 1,\r\n    title: 'Sonar Sweep'\r\n})\r\nexport class Day01 extends SolutionBase {\r\n\r\n    protected part1(): number {\r\n        const values = this.inputLines.map(x => parseInt(x));\r\n        const increaseCount = values.slice(1).reduce((a, x, i) => a + (values[i] < x ? 1 : 0), 0);\r\n\r\n        return increaseCount;\r\n    }\r\n\r\n    protected part2(): number {\r\n        const values = this.inputLines.map(x => parseInt(x));\r\n        const sumsOf3 = values.slice(2).map((x, i) => values[i] + values[i + 1] + x);\r\n        const increaseCount = sumsOf3.slice(1).reduce((a, x, i) => a + (sumsOf3[i] < x ? 1 : 0), 0);\r\n\r\n        return increaseCount;\r\n    }\r\n}\r\n","/**\r\n * Executes the regular expression over and over on the given text until all matches are found.\r\n * @param regex The regular expression.\r\n * @param text The text.\r\n */\r\nfunction regexMatches(regex: RegExp, text: string): RegExpExecArray[] {\r\n    const results: RegExpExecArray[] = [];\r\n    let record: RegExpExecArray | null;\r\n\r\n    while ((record = regex.exec(text))) {\r\n        results.push(record);\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\nfunction* regexMatchesLazy(regex: RegExp, text: string): Generator<RegExpExecArray, void, unknown> {\r\n    let record: RegExpExecArray | null;\r\n    while ((record = regex.exec(text))) {\r\n        yield record;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nfunction assertNever(value: never, shouldThrow = true): void | never {\r\n    if (shouldThrow) {\r\n        throw new Error('Coding error! This path should never be reached!');\r\n    }\r\n}\r\n\r\nfunction get2DigitDay(day: number): string {\r\n    return day.toString().padStart(2, '0');\r\n}\r\n\r\n/** Performs a logical XOR operation on the two parameters. */\r\nfunction xor(a: boolean, b: boolean): boolean {\r\n    return a !== b; // (a || b) && !(a && b);\r\n}\r\n\r\nexport {\r\n    assertNever,\r\n    regexMatches,\r\n    regexMatchesLazy,\r\n    get2DigitDay,\r\n    xor\r\n};\r\n\r\n","import { regexMatches } from '../core/helpers';\r\nimport SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\n@solutionInfo({\r\n    day: 2,\r\n    title: 'Dive!'\r\n})\r\nexport class Day02 extends SolutionBase {\r\n\r\n    protected part1(): number {\r\n        const sub = { hor: 0, dep: 0 };\r\n        this.parseInput().forEach(command => {\r\n            sub.hor += command.hor;\r\n            sub.dep += command.dep;\r\n        });\r\n\r\n        return sub.hor * sub.dep;\r\n    }\r\n\r\n    protected part2(): number {\r\n        const sub = { hor: 0, dep: 0, aim: 0 };\r\n        this.parseInput().forEach(command => {\r\n            sub.aim += command.dep;\r\n            sub.hor += command.hor;\r\n            sub.dep += sub.aim * command.hor;\r\n        });\r\n\r\n        return sub.hor * sub.dep;\r\n    }\r\n\r\n    private parseInput() {\r\n        return regexMatches(/([a-z]+) (\\d+)/g, this.input).map(match => {\r\n            const [, commandStr, valueStr] = match;\r\n            const value = parseInt(valueStr);\r\n            const command = { hor: 0, dep: 0 };\r\n            switch (commandStr) {\r\n                case 'forward': command.hor += value; break;\r\n                case 'down': command.dep += value; break;\r\n                case 'up': command.dep -= value; break;\r\n                default: throw new Error('Invalid input!');\r\n            }\r\n            return command;\r\n        });\r\n    }\r\n}\r\n","import { xor } from '../core/helpers';\r\nimport SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\ntype KeepMode = 'most_common' | 'least_common';\r\n\r\n@solutionInfo({\r\n    day: 3,\r\n    title: 'Binary Diagnostic'\r\n})\r\nexport class Day03 extends SolutionBase {\r\n\r\n    protected part1(): number {\r\n        const binaryNumbers = this.inputLines;\r\n        const halfCount = binaryNumbers.length / 2;\r\n        const bitCounts = binaryNumbers[0].split('').map((_, pos) =>\r\n            binaryNumbers.reduce((a, bNumber) => a + parseInt(bNumber[pos]), 0)\r\n        );\r\n\r\n        const gamma = parseInt(bitCounts.map(x => x >= halfCount ? '1' : '0').join(''), 2);\r\n        const epsilon = parseInt(bitCounts.map(x => x < halfCount ? '1' : '0').join(''), 2);\r\n\r\n        return gamma * epsilon;\r\n    }\r\n\r\n    protected part2(): number {\r\n        const binaryNumbers = this.inputLines;\r\n        const oxygenGeneratorRating = this.getRating(binaryNumbers, 'most_common');\r\n        const co2ScrubberRating = this.getRating(binaryNumbers, 'least_common');\r\n\r\n        return oxygenGeneratorRating * co2ScrubberRating;\r\n    }\r\n\r\n    private getRating(bNumbers: string[], keep: KeepMode): number {\r\n        for (let pos = 0; pos < bNumbers[0].length; pos++) {\r\n            bNumbers = this.filter(bNumbers, pos, keep);\r\n            if (bNumbers.length === 1) { break; }\r\n        }\r\n\r\n        return parseInt(bNumbers[0], 2);\r\n    }\r\n\r\n    private filter(bNumbers: string[], position: number, keep: KeepMode): string[] {\r\n        const bitCount = bNumbers.reduce((a, x) => a + parseInt(x[position]), 0);\r\n        const keepBit = xor(bitCount >= bNumbers.length / 2, keep === 'least_common') ? '1' : '0';\r\n\r\n        return bNumbers.filter(x => x[position] === keepBit);\r\n    }\r\n}\r\n","import { regexMatches } from '../core/helpers';\r\nimport SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\nconst boardSize = 5;\r\n\r\n@solutionInfo({\r\n    day: 4,\r\n    title: 'Giant Squid'\r\n})\r\nexport class Day04 extends SolutionBase {\r\n\r\n    protected part1(): number {\r\n        return this.playBingo('play to win');\r\n    }\r\n\r\n    protected part2(): number {\r\n        return this.playBingo('let the giant squid win');\r\n    }\r\n\r\n    private playBingo(strategy: 'play to win' | 'let the giant squid win'): number {\r\n        const { numbers, boards, lookup } = this.parseInput();\r\n        const marks: boolean[][][] = boards.map(() => Array(boardSize).fill(0).map(() => Array(boardSize).fill(false)));\r\n        const wins: Set<number> = new Set();\r\n        const targetWinCount = strategy === 'play to win' ? 1 : boards.length;\r\n\r\n        for (const calledNumber of numbers) {\r\n            const hits = lookup.get(calledNumber);\r\n            if (!hits) { continue; }\r\n\r\n            for (const { ti, tj, tk } of hits) {\r\n                marks[ti][tj][tk] = true;\r\n\r\n                if (!wins.has(ti) && this.isBingo(marks[ti], tj, tk)) {\r\n                    wins.add(ti);\r\n                    if (wins.size === targetWinCount) {\r\n                        const sum = boards[ti].reduce((boardSum, rowNumbers, row) =>\r\n                            boardSum + rowNumbers.reduce((rowSum, aNumber, col) =>\r\n                                rowSum + (marks[ti][row][col] ? 0 : aNumber), 0), 0);\r\n\r\n                        return sum * calledNumber;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.noSolution();\r\n    }\r\n\r\n    private isBingo(board: boolean[][], hitRow: number, hitCol: number): boolean {\r\n        let row = true;\r\n        let col = true;\r\n        for (let i = 0; i < boardSize; i++) {\r\n            row &&= board[i][hitCol];\r\n            col &&= board[hitRow][i];\r\n            if (!row && !col) { return false; }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private parseInput() {\r\n        const numbers = this.parseNumbersInLine(this.inputLines[0]);\r\n        const boards: number[][][] = [];\r\n        const lookup = new Map<number, { ti: number, tj: number, tk: number; }[]>();\r\n\r\n        let lineIndex = 1;\r\n        while (lineIndex < this.inputLines.length) {\r\n            const board: number[][] = [];\r\n            const ti = boards.push(board) - 1;\r\n\r\n            let line: string;\r\n            while ((line = this.inputLines[++lineIndex])) {\r\n                const rowNumbers = this.parseNumbersInLine(line);\r\n                const tj = board.push(rowNumbers) - 1;\r\n                rowNumbers.map((n, tk) => {\r\n                    let lookupEntry = lookup.get(n);\r\n                    if (!lookupEntry) { lookup.set(n, (lookupEntry = [])); }\r\n                    lookupEntry.push({ ti, tj, tk });\r\n                });\r\n            }\r\n        }\r\n\r\n        return { numbers, boards, lookup };\r\n    }\r\n\r\n    private parseNumbersInLine(line: string): number[] {\r\n        return regexMatches(/\\d+/g, line).map(match => parseInt(match[0]));\r\n    }\r\n}\r\n","import { regexMatches } from '../core/helpers';\r\nimport SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\ninterface Pipe { x1: number; y1: number; x2: number; y2: number; }\r\n\r\n@solutionInfo({\r\n    day: 5,\r\n    title: 'Hydrothermal Venture'\r\n})\r\nexport class Day05 extends SolutionBase {\r\n\r\n    protected part1(): number {\r\n        const pipes = this.parsePipes();\r\n        const map = this.createMap(pipes, 'skip diagonals');\r\n        const overlapCount = this.countOverlaps(map);\r\n\r\n        return overlapCount;\r\n    }\r\n\r\n    protected part2(): number {\r\n        const pipes = this.parsePipes();\r\n        const map = this.createMap(pipes, 'include diagonals');\r\n        const overlapCount = this.countOverlaps(map);\r\n\r\n        return overlapCount;\r\n    }\r\n\r\n    private countOverlaps(map: number[][]): number {\r\n        return map.reduce((a, row) => a + row.reduce((a, x) => a + (x > 1 ? 1 : 0), 0), 0);\r\n    }\r\n\r\n    private createMap(pipes: Pipe[], mode: 'skip diagonals' | 'include diagonals'): number[][] {\r\n        const map: number[][] = [];\r\n        const skipDiagonals = mode === 'skip diagonals';\r\n        for (const { x1, y1, x2, y2 } of pipes) {\r\n            if (skipDiagonals && x1 !== x2 && y1 !== y2) {\r\n                continue;\r\n            }\r\n            this.drawLine(map, x1, y1, x2, y2);\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    private drawLine(map: number[][], x1: number, y1: number, x2: number, y2: number) {\r\n        const dx = Math.sign(x2 - x1);\r\n        const dy = Math.sign(y2 - y1);\r\n\r\n        let [x, y] = [null, null] as (number | null)[];\r\n        while (x !== x2 || y !== y2) {\r\n            x = (x ?? x1 - dx) + dx;\r\n            y = (y ?? y1 - dy) + dy;\r\n\r\n            if (map[y] === undefined) { map[y] = []; }\r\n            if (map[y][x] === undefined) { map[y][x] = 0; }\r\n            map[y][x]++;\r\n        }\r\n    }\r\n\r\n    private parsePipes(): Pipe[] {\r\n        return regexMatches(/(\\d+),(\\d+) -> (\\d+),(\\d+)/g, this.input).map(match => {\r\n            const [x1, y1, x2, y2] = match.slice(1).map(x => parseInt(x));\r\n            return { x1, y1, x2, y2 };\r\n        });\r\n    }\r\n}\r\n","import { regexMatches } from '../core/helpers';\r\nimport SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\nconst restartAge = 6;\r\nconst newBornAge = 8;\r\n\r\n@solutionInfo({\r\n    day: 6,\r\n    title: 'Lanternfish'\r\n})\r\nexport class Day06 extends SolutionBase {\r\n\r\n    protected part1(): number {\r\n        return this.simulateLanternfish(80);\r\n    }\r\n\r\n    protected part2(): number {\r\n        return this.simulateLanternfish(256);\r\n    }\r\n\r\n    private simulateLanternfish(dayCount: number): number {\r\n        const ages: number[] = Array(newBornAge + 1).fill(0);\r\n        const fishes = regexMatches(/\\d/g, this.input).map(x => parseInt(x[0]));\r\n        fishes.forEach(x => ages[x]++);\r\n\r\n        for (let day = 0; day < dayCount; day++) {\r\n            const count = ages.shift() as number;\r\n            ages[newBornAge] = count;\r\n            ages[restartAge] += count;\r\n        }\r\n\r\n        const population = ages.reduce((a, x) => a + x, 0);\r\n        return population;\r\n    }\r\n}\r\n","import { regexMatches } from '../core/helpers';\r\nimport SolutionBase from '../core/solutionBase';\r\nimport { solutionInfo } from '../core/solutionInfo';\r\n\r\n@solutionInfo({\r\n    day: 7,\r\n    title: 'The Treachery of Whales'\r\n})\r\nexport class Day07 extends SolutionBase {\r\n\r\n    protected part1(): number {\r\n        const { crabs, minPos, maxPos } = this.parseInput();\r\n\r\n        let minMoves = Number.MAX_VALUE;\r\n        for (let target = minPos; target <= maxPos; target++) {\r\n            const moves = crabs.reduce((a, x) => a + Math.abs(x - target), 0);\r\n            minMoves = Math.min(minMoves, moves);\r\n        }\r\n\r\n        return minMoves;\r\n    }\r\n\r\n    protected part2(): number {\r\n        const { crabs, minPos, maxPos } = this.parseInput();\r\n\r\n        let minMoves = Number.MAX_VALUE;\r\n        for (let target = minPos; target <= maxPos; target++) {\r\n            const moves = crabs.reduce((a, x) => {\r\n                const delta = Math.abs(x - target);\r\n                const fuel = delta * (delta + 1) / 2;\r\n                return a + fuel;\r\n            }, 0);\r\n            minMoves = Math.min(minMoves, moves);\r\n        }\r\n\r\n        return minMoves;\r\n    }\r\n\r\n    private parseInput() {\r\n        let minPos = Number.MAX_VALUE;\r\n        let maxPos = Number.MIN_VALUE;\r\n\r\n        const crabs = regexMatches(/\\d+/g, this.input).map(x => {\r\n            const pos = parseInt(x[0]);\r\n            minPos = Math.min(minPos, pos);\r\n            maxPos = Math.max(maxPos, pos);\r\n            return pos;\r\n        });\r\n\r\n        return { crabs, minPos, maxPos };\r\n    }\r\n}\r\n","/// <reference lib=\"webworker\" />\r\n\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport solutionManager from '../../core/solutionManager';\r\nimport { SolutionResult } from '../../core/solutionState';\r\nimport SolveRequest from './solveRequest';\r\n\r\nconst solutionInfos = solutionManager.getSolutionsByDay();\r\n\r\ninterface WorkerRequest {\r\n    data: SolveRequest;\r\n}\r\n\r\naddEventListener('message', async ({ data }: WorkerRequest) => {\r\n    const solutionInfo = solutionInfos.get(data.day);\r\n    if (!solutionInfo) { return; }\r\n\r\n    const solution = solutionInfo.create();\r\n    solution.init(data.input);\r\n\r\n    for (const part of [1, 2] as const) {\r\n        const observable = solution.solveWithProgress(part);\r\n        await lastValueFrom(observable.pipe(\r\n            tap(state => postMessage(state))\r\n        ));\r\n    }\r\n\r\n    // Post an invalid result to mark the end of the work.\r\n    postMessage(new SolutionResult(-1, null, 0));\r\n});\r\n","import '../solutions';\r\nimport { SolutionInfo, solutionInfoList } from './solutionInfo';\r\n\r\nclass SolutionManager {\r\n    /** Get the solutions in a (day, solutionInfo) map. */\r\n    getSolutionsByDay(): Map<number, SolutionInfo> {\r\n        return new Map(solutionInfoList.map(info => [info.day, info]));\r\n    }\r\n\r\n    /** Get the solutions in ascending order by day. */\r\n    getSolutions(): SolutionInfo[] {\r\n        return Array.from(this.getSolutionsByDay().values()).sort((a, b) => a.day - b.day);\r\n    }\r\n}\r\n\r\nconst solutionManager = new SolutionManager();\r\n\r\nexport default solutionManager;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [487], function() { return __webpack_require__(6459); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"8dc0e7a2\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/aoc2021/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t459: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkaoc2021\"] = self[\"webpackChunkaoc2021\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(487).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["SolutionProgress","part","progress","timeMs","kind","SolutionResult","result","visualizationData","SolutionError","message","SolutionBase","minTimeBetweenUpdatesMs","_input","_inputLines","currentSolution","this","undefined","parseInputLines","input","lastValueFrom","solveWithProgress","state","Observable","subscriber","error","partFunction","part1","part2","activePart","stopwatch","Stopwatch","progressStopwatch","start","apply","stop","resultPack","next","exception","complete","current","getTime","msg","Error","emptyCount","inputLines","split","whiteSpaceLineRegex","length","line","test","splice","solutionInfoList","solutionInfo","info","day","title","ctor","push","create","values","map","x","parseInt","slice","reduce","a","i","sumsOf3","regexMatches","regex","text","record","results","exec","sub","hor","dep","parseInput","forEach","command","aim","match","commandStr","valueStr","value","binaryNumbers","halfCount","bitCounts","_","pos","bNumber","join","getRating","bNumbers","keep","filter","position","bitCount","keepBit","playBingo","strategy","numbers","boards","lookup","marks","Array","fill","wins","Set","targetWinCount","calledNumber","hits","get","ti","tj","tk","has","isBingo","add","size","boardSum","rowNumbers","row","rowSum","aNumber","col","noSolution","board","hitRow","hitCol","parseNumbersInLine","Map","lineIndex","n","lookupEntry","set","pipes","parsePipes","createMap","countOverlaps","mode","skipDiagonals","x1","y1","x2","y2","drawLine","dx","Math","sign","dy","y","simulateLanternfish","dayCount","ages","newBornAge","count","shift","crabs","minPos","maxPos","minMoves","Number","MAX_VALUE","target","moves","abs","min","delta","MIN_VALUE","max","solutionInfos","SolutionManager","from","getSolutionsByDay","sort","b","solutionManager","addEventListener","data","solution","init","observable","pipe","tap","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","r","getter","__esModule","d","definition","o","defineProperty","enumerable","f","e","chunkId","Promise","all","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","pop","then"],"sourceRoot":""}